1626894626
waR3U4bTeM%3A9d442754d0216f822c9c673f2ef87701-5ac0f70ba6416e291b1300f778525c5d
s:144440:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjVhYzBmNzBiYTY0MTZlMjkxYjEzMDBmNzc4NTI1YzVkIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6Njg6IjMwNDU1Y2RiYjczMzBkY2MxZjA3OTgyNjdlODM2MzM4OWM3YmNlMTE3M2IxOTg0OTRmZTRkNGRhZTI4NTc3NzYucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6OTA6InZhci9jYWNoZS9kZXYvdHdpZy8zMC8zMDQ1NWNkYmI3MzMwZGNjMWYwNzk4MjY3ZTgzNjMzODljN2JjZTExNzNiMTk4NDk0ZmU0ZDRkYWUyODU3Nzc2LnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6Nzg5OTQ6Ijw/cGhwCgp1c2UgVHdpZ1xFbnZpcm9ubWVudDsKdXNlIFR3aWdcRXJyb3JcTG9hZGVyRXJyb3I7CnVzZSBUd2lnXEVycm9yXFJ1bnRpbWVFcnJvcjsKdXNlIFR3aWdcRXh0ZW5zaW9uXFNhbmRib3hFeHRlbnNpb247CnVzZSBUd2lnXE1hcmt1cDsKdXNlIFR3aWdcU2FuZGJveFxTZWN1cml0eUVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZFRhZ0Vycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZpbHRlckVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZ1bmN0aW9uRXJyb3I7CnVzZSBUd2lnXFNvdXJjZTsKdXNlIFR3aWdcVGVtcGxhdGU7CgovKiBAV2ViUHJvZmlsZXIvQ29sbGVjdG9yL2xvZ2dlci5odG1sLnR3aWcgKi8KY2xhc3MgX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MSBleHRlbmRzIFRlbXBsYXRlCnsKICAgIHByaXZhdGUgJHNvdXJjZTsKICAgIHByaXZhdGUgJG1hY3JvcyA9IFtdOwoKICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdChFbnZpcm9ubWVudCAkZW52KQogICAgewogICAgICAgIHBhcmVudDo6X19jb25zdHJ1Y3QoJGVudik7CgogICAgICAgICR0aGlzLT5zb3VyY2UgPSAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpOwoKICAgICAgICAkdGhpcy0+YmxvY2tzID0gWwogICAgICAgICAgICAndG9vbGJhcicgPT4gWyR0aGlzLCAnYmxvY2tfdG9vbGJhciddLAogICAgICAgICAgICAnbWVudScgPT4gWyR0aGlzLCAnYmxvY2tfbWVudSddLAogICAgICAgICAgICAncGFuZWwnID0+IFskdGhpcywgJ2Jsb2NrX3BhbmVsJ10sCiAgICAgICAgXTsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZnVuY3Rpb24gZG9HZXRQYXJlbnQoYXJyYXkgJGNvbnRleHQpCiAgICB7CiAgICAgICAgLy8gbGluZSAxCiAgICAgICAgcmV0dXJuICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvbGF5b3V0Lmh0bWwudHdpZyI7CiAgICB9CgogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGRvRGlzcGxheShhcnJheSAkY29udGV4dCwgYXJyYXkgJGJsb2NrcyA9IFtdKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnVuZGxlXFxXZWJQcm9maWxlckJ1bmRsZVxcVHdpZ1xcV2ViUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5lbnRlcigkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJ0ZW1wbGF0ZSIsICJAV2ViUHJvZmlsZXIvQ29sbGVjdG9yL2xvZ2dlci5odG1sLnR3aWciKSk7CgogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMi0+ZW50ZXIoJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAidGVtcGxhdGUiLCAiQFdlYlByb2ZpbGVyL0NvbGxlY3Rvci9sb2dnZXIuaHRtbC50d2lnIikpOwoKICAgICAgICAvLyBsaW5lIDMKICAgICAgICAkbWFjcm9zWyJoZWxwZXIiXSA9ICR0aGlzLT5tYWNyb3NbImhlbHBlciJdID0gJHRoaXM7CiAgICAgICAgLy8gbGluZSAxCiAgICAgICAgJHRoaXMtPnBhcmVudCA9ICR0aGlzLT5sb2FkVGVtcGxhdGUoIkBXZWJQcm9maWxlci9Qcm9maWxlci9sYXlvdXQuaHRtbC50d2lnIiwgIkBXZWJQcm9maWxlci9Db2xsZWN0b3IvbG9nZ2VyLmh0bWwudHdpZyIsIDEpOwogICAgICAgICR0aGlzLT5wYXJlbnQtPmRpc3BsYXkoJGNvbnRleHQsIGFycmF5X21lcmdlKCR0aGlzLT5ibG9ja3MsICRibG9ja3MpKTsKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5sZWF2ZSgkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YpOwoKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5sZWF2ZSgkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YpOwoKICAgIH0KCiAgICAvLyBsaW5lIDUKICAgIHB1YmxpYyBmdW5jdGlvbiBibG9ja190b29sYmFyKCRjb250ZXh0LCBhcnJheSAkYmxvY2tzID0gW10pCiAgICB7CiAgICAgICAgJG1hY3JvcyA9ICR0aGlzLT5tYWNyb3M7CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZSA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCdW5kbGVcXFdlYlByb2ZpbGVyQnVuZGxlXFxUd2lnXFxXZWJQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmVudGVyKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgInRvb2xiYXIiKSk7CgogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMi0+ZW50ZXIoJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAidG9vbGJhciIpKTsKCiAgICAgICAgLy8gbGluZSA2CiAgICAgICAgZWNobyAiICAgICI7CiAgICAgICAgaWYgKCgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZXJyb3JzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2KSB8fCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY291bnRkZXByZWNhdGlvbnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDYpKSB8fCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY291bnR3YXJuaW5ncyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNikpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgNwogICAgICAgICAgICBlY2hvICIgICAgICAgICI7CiAgICAgICAgICAgIG9iX3N0YXJ0KCk7CiAgICAgICAgICAgIC8vIGxpbmUgOAogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAiOwogICAgICAgICAgICAkY29udGV4dFsic3RhdHVzX2NvbG9yIl0gPSAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb3VudGVycm9ycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgOCkpID8gKCJyZWQiKSA6ICgieWVsbG93IikpOwogICAgICAgICAgICAvLyBsaW5lIDkKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgIjsKICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvSWNvbi9sb2dnZXIuc3ZnIik7CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItdmFsdWVcIj4iOwogICAgICAgICAgICAvLyBsaW5lIDEwCiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDEwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb3VudGVycm9ycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTApKSA/ICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZXJyb3JzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMCkpIDogKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZGVwcmVjYXRpb25zIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMCkgKyB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50d2FybmluZ3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEwKSkpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICI7CiAgICAgICAgICAgICRjb250ZXh0WyJpY29uIl0gPSAoJycgPT09ICR0bXAgPSBvYl9nZXRfY2xlYW4oKSkgPyAnJyA6IG5ldyBNYXJrdXAoJHRtcCwgJHRoaXMtPmVudi0+Z2V0Q2hhcnNldCgpKTsKICAgICAgICAgICAgLy8gbGluZSAxMgogICAgICAgICAgICBlY2hvICIKICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDEzCiAgICAgICAgICAgIG9iX3N0YXJ0KCk7CiAgICAgICAgICAgIC8vIGxpbmUgMTQKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+RXJyb3JzPC9iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy0iOwogICAgICAgICAgICAvLyBsaW5lIDE2CiAgICAgICAgICAgIGVjaG8gKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZXJyb3JzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNikpID8gKCJyZWQiKSA6ICgiIikpOwogICAgICAgICAgICBlY2hvICJcIj4iOwogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoJGNvbnRleHRbImNvbGxlY3RvciJdID8/IG51bGwpLCAiY291bnRlcnJvcnMiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAxNikpID8gKF90d2lnX2RlZmF1bHRfZmlsdGVyKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoJGNvbnRleHRbImNvbGxlY3RvciJdID8/IG51bGwpLCAiY291bnRlcnJvcnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE2KSwgMCkpIDogKDApKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPldhcm5pbmdzPC9iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy0iOwogICAgICAgICAgICAvLyBsaW5lIDIxCiAgICAgICAgICAgIGVjaG8gKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50d2FybmluZ3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIxKSkgPyAoInllbGxvdyIpIDogKCIiKSk7CiAgICAgICAgICAgIGVjaG8gIlwiPiI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICgkY29udGV4dFsiY29sbGVjdG9yIl0gPz8gbnVsbCksICJjb3VudHdhcm5pbmdzIiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgMjEpKSA/IChfdHdpZ19kZWZhdWx0X2ZpbHRlcih0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgImNvdW50d2FybmluZ3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIxKSwgMCkpIDogKDApKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPkRlcHJlY2F0aW9uczwvYj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtIjsKICAgICAgICAgICAgLy8gbGluZSAyNgogICAgICAgICAgICBlY2hvICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDI2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb3VudGRlcHJlY2F0aW9ucyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjYpKSA/ICgieWVsbG93IikgOiAoIiIpKTsKICAgICAgICAgICAgZWNobyAiXCI+IjsKICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgImNvdW50ZGVwcmVjYXRpb25zIiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgMjYpKSA/IChfdHdpZ19kZWZhdWx0X2ZpbHRlcih0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgImNvdW50ZGVwcmVjYXRpb25zIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNiksIDApKSA6ICgwKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgIjsKICAgICAgICAgICAgJGNvbnRleHRbInRleHQiXSA9ICgnJyA9PT0gJHRtcCA9IG9iX2dldF9jbGVhbigpKSA/ICcnIDogbmV3IE1hcmt1cCgkdG1wLCAkdGhpcy0+ZW52LT5nZXRDaGFyc2V0KCkpOwogICAgICAgICAgICAvLyBsaW5lIDI5CiAgICAgICAgICAgIGVjaG8gIgogICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgMzAKICAgICAgICAgICAgZWNobyB0d2lnX2luY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvdG9vbGJhcl9pdGVtLmh0bWwudHdpZyIsIFsibGluayIgPT4gKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlcl91cmwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicHJvZmlsZXJfdXJsIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInByb2ZpbGVyX3VybCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGVyX3VybCIgZG9lcyBub3QgZXhpc3QuJywgMzAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInN0YXR1cyIgPT4gKGlzc2V0KCRjb250ZXh0WyJzdGF0dXNfY29sb3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygic3RhdHVzX2NvbG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInN0YXR1c19jb2xvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInN0YXR1c19jb2xvciIgZG9lcyBub3QgZXhpc3QuJywgMzAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKV0pOwogICAgICAgICAgICBlY2hvICIKICAgICI7CiAgICAgICAgfQogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmxlYXZlKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZik7CgogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmxlYXZlKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZik7CgogICAgfQoKICAgIC8vIGxpbmUgMzQKICAgIHB1YmxpYyBmdW5jdGlvbiBibG9ja19tZW51KCRjb250ZXh0LCBhcnJheSAkYmxvY2tzID0gW10pCiAgICB7CiAgICAgICAgJG1hY3JvcyA9ICR0aGlzLT5tYWNyb3M7CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZSA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCdW5kbGVcXFdlYlByb2ZpbGVyQnVuZGxlXFxUd2lnXFxXZWJQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmVudGVyKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgIm1lbnUiKSk7CgogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMi0+ZW50ZXIoJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAibWVudSIpKTsKCiAgICAgICAgLy8gbGluZSAzNQogICAgICAgIGVjaG8gIiAgICA8c3BhbiBjbGFzcz1cImxhYmVsIGxhYmVsLXN0YXR1cy0iOwogICAgICAgIGVjaG8gKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZXJyb3JzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNSkpID8gKCJlcnJvciIpIDogKCgoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzNSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY291bnRkZXByZWNhdGlvbnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1KSB8fCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50d2FybmluZ3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1KSkpID8gKCJ3YXJuaW5nIikgOiAoIiIpKSkpOwogICAgICAgIGVjaG8gIiAiOwogICAgICAgIGVjaG8gKCh0d2lnX3Rlc3RfZW1wdHkodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDM1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJsb2dzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNSkpKSA/ICgiZGlzYWJsZWQiKSA6ICgiIikpOwogICAgICAgIGVjaG8gIlwiPgogICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvblwiPiI7CiAgICAgICAgLy8gbGluZSAzNgogICAgICAgIGVjaG8gdHdpZ19pbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQFdlYlByb2ZpbGVyL0ljb24vbG9nZ2VyLnN2ZyIpOwogICAgICAgIGVjaG8gIjwvc3Bhbj4KICAgICAgICA8c3Ryb25nPkxvZ3M8L3N0cm9uZz4KICAgICAgICAiOwogICAgICAgIC8vIGxpbmUgMzgKICAgICAgICBpZiAoKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZXJyb3JzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzOCkgfHwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDM4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb3VudGRlcHJlY2F0aW9ucyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzgpKSB8fCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50d2FybmluZ3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM4KSkpIHsKICAgICAgICAgICAgLy8gbGluZSAzOQogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvdW50XCI+CiAgICAgICAgICAgICAgICA8c3Bhbj4iOwogICAgICAgICAgICAvLyBsaW5lIDQwCiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDQwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb3VudGVycm9ycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNDApKSA/ICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNDAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZXJyb3JzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0MCkpIDogKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNDAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZGVwcmVjYXRpb25zIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0MCkgKyB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNDAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50d2FybmluZ3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDQwKSkpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiPC9zcGFuPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSA0MwogICAgICAgIGVjaG8gIiAgICA8L3NwYW4+CiI7CiAgICAgICAgCiAgICAgICAgJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMi0+bGVhdmUoJF9faW50ZXJuYWxfMzE5MzkzNDYxMzA5ODkyOTI0ZmY2ZTc0ZDZkNmU2NDI4N2RmNjRiNjM1NDViOTk0ZTEwMGQ0YWIyMjNhZWQwMl9wcm9mKTsKCiAgICAgICAgCiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+bGVhdmUoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mKTsKCiAgICB9CgogICAgLy8gbGluZSA0NgogICAgcHVibGljIGZ1bmN0aW9uIGJsb2NrX3BhbmVsKCRjb250ZXh0LCBhcnJheSAkYmxvY2tzID0gW10pCiAgICB7CiAgICAgICAgJG1hY3JvcyA9ICR0aGlzLT5tYWNyb3M7CiAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZSA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCdW5kbGVcXFdlYlByb2ZpbGVyQnVuZGxlXFxUd2lnXFxXZWJQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmVudGVyKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgInBhbmVsIikpOwoKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJyaWRnZVxcVHdpZ1xcRXh0ZW5zaW9uXFxQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmVudGVyKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgInBhbmVsIikpOwoKICAgICAgICAvLyBsaW5lIDQ3CiAgICAgICAgZWNobyAiICAgIDxoMj5Mb2cgTWVzc2FnZXM8L2gyPgoKICAgICI7CiAgICAgICAgLy8gbGluZSA0OQogICAgICAgIGlmICh0d2lnX3Rlc3RfZW1wdHkodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDQ5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJsb2dzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0OSkpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgNTAKICAgICAgICAgICAgZWNobyAiICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgPHA+Tm8gbG9nIG1lc3NhZ2VzIGF2YWlsYWJsZS48L3A+CiAgICAgICAgPC9kaXY+CiAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgNTQKICAgICAgICAgICAgZWNobyAiICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDU1CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgIjsKICAgICAgICAgICAgbGlzdCgkY29udGV4dFsiZGVwcmVjYXRpb25fbG9ncyJdLCAkY29udGV4dFsiZGVidWdfbG9ncyJdLCAkY29udGV4dFsiaW5mb19hbmRfZXJyb3JfbG9ncyJdLCAkY29udGV4dFsic2lsZW5jZWRfbG9ncyJdKSA9ICAgICAgICAgICAgIFtbXSwgW10sIFtdLCBbXV07CiAgICAgICAgICAgIC8vIGxpbmUgNTYKICAgICAgICAgICAgZWNobyAiICAgICAgICAiOwogICAgICAgICAgICAkY29udGV4dFsiaGFzX2Vycm9yX2xvZ3MiXSA9IGZhbHNlOwogICAgICAgICAgICAvLyBsaW5lIDU3CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgIjsKICAgICAgICAgICAgJGNvbnRleHRbJ19wYXJlbnQnXSA9ICRjb250ZXh0OwogICAgICAgICAgICAkY29udGV4dFsnX3NlcSddID0gdHdpZ19lbnN1cmVfdHJhdmVyc2FibGUodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDU3LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJsb2dzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA1NykpOwogICAgICAgICAgICBmb3JlYWNoICgkY29udGV4dFsnX3NlcSddIGFzICRjb250ZXh0WyJfa2V5Il0gPT4gJGNvbnRleHRbImxvZyJdKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDU4CiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgaWYgKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvZyJdLCAic2NyZWFtIiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgNTgpICYmICAhdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb2ciXSwgInNjcmVhbSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNTgpKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNTkKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsiZGVwcmVjYXRpb25fbG9ncyJdID0gdHdpZ19hcnJheV9tZXJnZSgoaXNzZXQoJGNvbnRleHRbImRlcHJlY2F0aW9uX2xvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiZGVwcmVjYXRpb25fbG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJkZXByZWNhdGlvbl9sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiZGVwcmVjYXRpb25fbG9ncyIgZG9lcyBub3QgZXhpc3QuJywgNTksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgWzAgPT4gJGNvbnRleHRbImxvZyJdXSk7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA2MAogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9nIl0sICJzY3JlYW0iLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCA2MCkgJiYgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb2ciXSwgInNjcmVhbSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNjApKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNjEKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsic2lsZW5jZWRfbG9ncyJdID0gdHdpZ19hcnJheV9tZXJnZSgoaXNzZXQoJGNvbnRleHRbInNpbGVuY2VkX2xvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygic2lsZW5jZWRfbG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJzaWxlbmNlZF9sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAic2lsZW5jZWRfbG9ncyIgZG9lcyBub3QgZXhpc3QuJywgNjEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgWzAgPT4gJGNvbnRleHRbImxvZyJdXSk7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA2MgogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoKDAgPT09IHR3aWdfY29tcGFyZSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvZyJdLCAicHJpb3JpdHlOYW1lIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2MiksICJERUJVRyIpKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNjMKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsiZGVidWdfbG9ncyJdID0gdHdpZ19hcnJheV9tZXJnZSgoaXNzZXQoJGNvbnRleHRbImRlYnVnX2xvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiZGVidWdfbG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJkZWJ1Z19sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiZGVidWdfbG9ncyIgZG9lcyBub3QgZXhpc3QuJywgNjMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgWzAgPT4gJGNvbnRleHRbImxvZyJdXSk7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA2NAogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNjUKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsiaW5mb19hbmRfZXJyb3JfbG9ncyJdID0gdHdpZ19hcnJheV9tZXJnZSgoaXNzZXQoJGNvbnRleHRbImluZm9fYW5kX2Vycm9yX2xvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiaW5mb19hbmRfZXJyb3JfbG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJpbmZvX2FuZF9lcnJvcl9sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiaW5mb19hbmRfZXJyb3JfbG9ncyIgZG9lcyBub3QgZXhpc3QuJywgNjUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgWzAgPT4gJGNvbnRleHRbImxvZyJdXSk7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA2NgogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIGlmICgoMCAhPT0gdHdpZ19jb21wYXJlKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9nIl0sICJwcmlvcml0eU5hbWUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDY2KSwgIklORk8iKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA2NwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0WyJoYXNfZXJyb3JfbG9ncyJdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA2OAogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA2OQogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDcwCiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJF9wYXJlbnQgPSAkY29udGV4dFsnX3BhcmVudCddOwogICAgICAgICAgICB1bnNldCgkY29udGV4dFsnX3NlcSddLCAkY29udGV4dFsnX2l0ZXJhdGVkJ10sICRjb250ZXh0Wydfa2V5J10sICRjb250ZXh0Wydsb2cnXSwgJGNvbnRleHRbJ19wYXJlbnQnXSwgJGNvbnRleHRbJ2xvb3AnXSk7CiAgICAgICAgICAgICRjb250ZXh0ID0gYXJyYXlfaW50ZXJzZWN0X2tleSgkY29udGV4dCwgJF9wYXJlbnQpICsgJF9wYXJlbnQ7CiAgICAgICAgICAgIC8vIGxpbmUgNzEKICAgICAgICAgICAgZWNobyAiCiAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRhYnNcIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYiAiOwogICAgICAgICAgICAvLyBsaW5lIDczCiAgICAgICAgICAgIGVjaG8gKCgoaXNzZXQoJGNvbnRleHRbImhhc19lcnJvcl9sb2dzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImhhc19lcnJvcl9sb2dzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImhhc19lcnJvcl9sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiaGFzX2Vycm9yX2xvZ3MiIGRvZXMgbm90IGV4aXN0LicsIDczLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpID8gKCJhY3RpdmUiKSA6ICgiIikpOwogICAgICAgICAgICBlY2hvICJcIj4KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPkluZm8uICZhbXA7IEVycm9ycyA8c3BhbiBjbGFzcz1cImJhZGdlIHN0YXR1cy0iOwogICAgICAgICAgICAvLyBsaW5lIDc0CiAgICAgICAgICAgIGVjaG8gKCh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNzQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZXJyb3JzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA3NCkpID8gKCJlcnJvciIpIDogKCgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDc0LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb3VudHdhcm5pbmdzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA3NCkpID8gKCJ3YXJuaW5nIikgOiAoIiIpKSkpOwogICAgICAgICAgICBlY2hvICJcIj4iOwogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA3NCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY291bnRlcnJvcnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDc0KSkgPyAodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDc0LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb3VudGVycm9ycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNzQpKSA6ICh0d2lnX2xlbmd0aF9maWx0ZXIoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJpbmZvX2FuZF9lcnJvcl9sb2dzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImluZm9fYW5kX2Vycm9yX2xvZ3MiLCAkY29udGV4dCkgPyAkY29udGV4dFsiaW5mb19hbmRfZXJyb3JfbG9ncyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImluZm9fYW5kX2Vycm9yX2xvZ3MiIGRvZXMgbm90IGV4aXN0LicsIDc0LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj48L2gzPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LW11dGVkXCI+SW5mb3JtYXRpb25hbCBhbmQgZXJyb3IgbG9nIG1lc3NhZ2VzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgYXBwbGljYXRpb24uPC9wPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgNzgKICAgICAgICAgICAgaWYgKHR3aWdfdGVzdF9lbXB0eSgoaXNzZXQoJGNvbnRleHRbImluZm9fYW5kX2Vycm9yX2xvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiaW5mb19hbmRfZXJyb3JfbG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJpbmZvX2FuZF9lcnJvcl9sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiaW5mb19hbmRfZXJyb3JfbG9ncyIgZG9lcyBub3QgZXhpc3QuJywgNzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkpIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgNzkKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgYXJlIG5vIGxvZyBtZXNzYWdlcyBvZiB0aGlzIGxldmVsLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgODMKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfY2FsbF9tYWNybygkbWFjcm9zWyJoZWxwZXIiXSwgIm1hY3JvX3JlbmRlcl90YWJsZSIsIFsoaXNzZXQoJGNvbnRleHRbImluZm9fYW5kX2Vycm9yX2xvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiaW5mb19hbmRfZXJyb3JfbG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJpbmZvX2FuZF9lcnJvcl9sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiaW5mb19hbmRfZXJyb3JfbG9ncyIgZG9lcyBub3QgZXhpc3QuJywgODMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImluZm8iLCB0cnVlXSwgODMsICRjb250ZXh0LCAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpKTsKICAgICAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gbGluZSA4NQogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYiAiOwogICAgICAgICAgICAvLyBsaW5lIDg4CiAgICAgICAgICAgIGVjaG8gKCgoICEoaXNzZXQoJGNvbnRleHRbImhhc19lcnJvcl9sb2dzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImhhc19lcnJvcl9sb2dzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImhhc19lcnJvcl9sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiaGFzX2Vycm9yX2xvZ3MiIGRvZXMgbm90IGV4aXN0LicsIDg4LCAkdGhpcy0+c291cmNlKTsgfSkoKSkgJiYgKDEgPT09IHR3aWdfY29tcGFyZSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgODgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvdW50ZGVwcmVjYXRpb25zIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA4OCksIDApKSkpID8gKCJhY3RpdmUiKSA6ICgiIikpOwogICAgICAgICAgICBlY2hvICJcIj4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgOTEKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPkRlcHJlY2F0aW9ucyA8c3BhbiBjbGFzcz1cImJhZGdlIHN0YXR1cy0iOwogICAgICAgICAgICBlY2hvICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDkxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb3VudGRlcHJlY2F0aW9ucyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgOTEpKSA/ICgid2FybmluZyIpIDogKCIiKSk7CiAgICAgICAgICAgIGVjaG8gIlwiPiI7CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICgkY29udGV4dFsiY29sbGVjdG9yIl0gPz8gbnVsbCksICJjb3VudGRlcHJlY2F0aW9ucyIsIFtdLCAiYW55IiwgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIDkxKSkgPyAoX3R3aWdfZGVmYXVsdF9maWx0ZXIodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICgkY29udGV4dFsiY29sbGVjdG9yIl0gPz8gbnVsbCksICJjb3VudGRlcHJlY2F0aW9ucyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgOTEpLCAwKSkgOiAoMCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICI8L3NwYW4+PC9oMz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC1tdXRlZFwiPkxvZyBtZXNzYWdlcyBnZW5lcmF0ZWQgYnkgdXNpbmcgZmVhdHVyZXMgbWFya2VkIGFzIGRlcHJlY2F0ZWQuPC9wPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgOTUKICAgICAgICAgICAgaWYgKHR3aWdfdGVzdF9lbXB0eSgoaXNzZXQoJGNvbnRleHRbImRlcHJlY2F0aW9uX2xvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiZGVwcmVjYXRpb25fbG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJkZXByZWNhdGlvbl9sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiZGVwcmVjYXRpb25fbG9ncyIgZG9lcyBub3QgZXhpc3QuJywgOTUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkpIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgOTYKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgYXJlIG5vIGxvZyBtZXNzYWdlcyBhYm91dCBkZXByZWNhdGVkIGZlYXR1cmVzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTAwCiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2NhbGxfbWFjcm8oJG1hY3Jvc1siaGVscGVyIl0sICJtYWNyb19yZW5kZXJfdGFibGUiLCBbKGlzc2V0KCRjb250ZXh0WyJkZXByZWNhdGlvbl9sb2dzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImRlcHJlY2F0aW9uX2xvZ3MiLCAkY29udGV4dCkgPyAkY29udGV4dFsiZGVwcmVjYXRpb25fbG9ncyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImRlcHJlY2F0aW9uX2xvZ3MiIGRvZXMgbm90IGV4aXN0LicsIDEwMCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZGVwcmVjYXRpb24iLCBmYWxzZSwgdHJ1ZV0sIDEwMCwgJGNvbnRleHQsICR0aGlzLT5nZXRTb3VyY2VDb250ZXh0KCkpOwogICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBsaW5lIDEwMgogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+RGVidWcgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPiI7CiAgICAgICAgICAgIC8vIGxpbmUgMTA2CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfbGVuZ3RoX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbImRlYnVnX2xvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiZGVidWdfbG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJkZWJ1Z19sb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiZGVidWdfbG9ncyIgZG9lcyBub3QgZXhpc3QuJywgMTA2LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICI8L3NwYW4+PC9oMz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC1tdXRlZFwiPlVuaW1wb3J0YW50IGxvZyBtZXNzYWdlcyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBleGVjdXRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLjwvcD4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDExMAogICAgICAgICAgICBpZiAodHdpZ190ZXN0X2VtcHR5KChpc3NldCgkY29udGV4dFsiZGVidWdfbG9ncyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJkZWJ1Z19sb2dzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImRlYnVnX2xvZ3MiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJkZWJ1Z19sb2dzIiBkb2VzIG5vdCBleGlzdC4nLCAxMTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkpIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTExCiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRoZXJlIGFyZSBubyBsb2cgbWVzc2FnZXMgb2YgdGhpcyBsZXZlbC48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDExNQogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19jYWxsX21hY3JvKCRtYWNyb3NbImhlbHBlciJdLCAibWFjcm9fcmVuZGVyX3RhYmxlIiwgWyhpc3NldCgkY29udGV4dFsiZGVidWdfbG9ncyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJkZWJ1Z19sb2dzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImRlYnVnX2xvZ3MiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJkZWJ1Z19sb2dzIiBkb2VzIG5vdCBleGlzdC4nLCAxMTUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImRlYnVnIl0sIDExNSwgJGNvbnRleHQsICR0aGlzLT5nZXRTb3VyY2VDb250ZXh0KCkpOwogICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBsaW5lIDExNwogICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+UEhQIE5vdGljZXMgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPiI7CiAgICAgICAgICAgIC8vIGxpbmUgMTIxCiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICgodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICgkY29udGV4dFsiY29sbGVjdG9yIl0gPz8gbnVsbCksICJjb3VudHNjcmVhbXMiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAxMjEpKSA/IChfdHdpZ19kZWZhdWx0X2ZpbHRlcih0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJjb2xsZWN0b3IiXSA/PyBudWxsKSwgImNvdW50c2NyZWFtcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTIxKSwgMCkpIDogKDApKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiPC9zcGFuPjwvaDM+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRleHQtbXV0ZWRcIj5Mb2cgbWVzc2FnZXMgZ2VuZXJhdGVkIGJ5IFBIUCBub3RpY2VzIHNpbGVuY2VkIHdpdGggdGhlIEAgb3BlcmF0b3IuPC9wPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgMTI1CiAgICAgICAgICAgIGlmICh0d2lnX3Rlc3RfZW1wdHkoKGlzc2V0KCRjb250ZXh0WyJzaWxlbmNlZF9sb2dzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInNpbGVuY2VkX2xvZ3MiLCAkY29udGV4dCkgPyAkY29udGV4dFsic2lsZW5jZWRfbG9ncyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInNpbGVuY2VkX2xvZ3MiIGRvZXMgbm90IGV4aXN0LicsIDEyNSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSkgewogICAgICAgICAgICAgICAgLy8gbGluZSAxMjYKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgYXJlIG5vIGxvZyBtZXNzYWdlcyBvZiB0aGlzIGxldmVsLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTMwCiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2NhbGxfbWFjcm8oJG1hY3Jvc1siaGVscGVyIl0sICJtYWNyb19yZW5kZXJfdGFibGUiLCBbKGlzc2V0KCRjb250ZXh0WyJzaWxlbmNlZF9sb2dzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInNpbGVuY2VkX2xvZ3MiLCAkY29udGV4dCkgPyAkY29udGV4dFsic2lsZW5jZWRfbG9ncyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInNpbGVuY2VkX2xvZ3MiIGRvZXMgbm90IGV4aXN0LicsIDEzMCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAic2lsZW5jZWQiXSwgMTMwLCAkY29udGV4dCwgJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKSk7CiAgICAgICAgICAgICAgICBlY2hvICIKICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxpbmUgMTMyCiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDEzNQogICAgICAgICAgICAkY29udGV4dFsiY29tcGlsZXJMb2dUb3RhbCJdID0gMDsKICAgICAgICAgICAgLy8gbGluZSAxMzYKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgIjsKICAgICAgICAgICAgJGNvbnRleHRbJ19wYXJlbnQnXSA9ICRjb250ZXh0OwogICAgICAgICAgICAkY29udGV4dFsnX3NlcSddID0gdHdpZ19lbnN1cmVfdHJhdmVyc2FibGUodHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDEzNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY29tcGlsZXJMb2dzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMzYpKTsKICAgICAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsiX2tleSJdID0+ICRjb250ZXh0WyJsb2dzIl0pIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTM3CiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICRjb250ZXh0WyJjb21waWxlckxvZ1RvdGFsIl0gPSAoKGlzc2V0KCRjb250ZXh0WyJjb21waWxlckxvZ1RvdGFsIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbXBpbGVyTG9nVG90YWwiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29tcGlsZXJMb2dUb3RhbCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbXBpbGVyTG9nVG90YWwiIGRvZXMgbm90IGV4aXN0LicsIDEzNywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpICsgdHdpZ19sZW5ndGhfZmlsdGVyKCR0aGlzLT5lbnYsICRjb250ZXh0WyJsb2dzIl0pKTsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTM4CiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAiOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRfcGFyZW50ID0gJGNvbnRleHRbJ19wYXJlbnQnXTsKICAgICAgICAgICAgdW5zZXQoJGNvbnRleHRbJ19zZXEnXSwgJGNvbnRleHRbJ19pdGVyYXRlZCddLCAkY29udGV4dFsnX2tleSddLCAkY29udGV4dFsnbG9ncyddLCAkY29udGV4dFsnX3BhcmVudCddLCAkY29udGV4dFsnbG9vcCddKTsKICAgICAgICAgICAgJGNvbnRleHQgPSBhcnJheV9pbnRlcnNlY3Rfa2V5KCRjb250ZXh0LCAkX3BhcmVudCkgKyAkX3BhcmVudDsKICAgICAgICAgICAgLy8gbGluZSAxMzkKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+Q29udGFpbmVyIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj4iOwogICAgICAgICAgICAvLyBsaW5lIDE0MAogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbImNvbXBpbGVyTG9nVG90YWwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29tcGlsZXJMb2dUb3RhbCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb21waWxlckxvZ1RvdGFsIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29tcGlsZXJMb2dUb3RhbCIgZG9lcyBub3QgZXhpc3QuJywgMTQwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIGVjaG8gIjwvc3Bhbj48L2gzPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LW11dGVkXCI+TG9nIG1lc3NhZ2VzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIG9mIHRoZSBzZXJ2aWNlIGNvbnRhaW5lci48L3A+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgLy8gbGluZSAxNDQKICAgICAgICAgICAgaWYgKHR3aWdfdGVzdF9lbXB0eSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTQ0LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb21waWxlckxvZ3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE0NCkpKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDE0NQogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5UaGVyZSBhcmUgbm8gY29tcGlsZXIgbG9nIG1lc3NhZ2VzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTQ5CiAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJsb2dzXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJmdWxsLXdpZHRoXCI+Q2xhc3M8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWVzc2FnZXM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAxNTgKICAgICAgICAgICAgICAgICRjb250ZXh0WydfcGFyZW50J10gPSAkY29udGV4dDsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydfc2VxJ10gPSB0d2lnX2Vuc3VyZV90cmF2ZXJzYWJsZSh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTU4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb21waWxlckxvZ3MiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE1OCkpOwogICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXSA9IFsKICAgICAgICAgICAgICAgICAgJ3BhcmVudCcgPT4gJGNvbnRleHRbJ19wYXJlbnQnXSwKICAgICAgICAgICAgICAgICAgJ2luZGV4MCcgPT4gMCwKICAgICAgICAgICAgICAgICAgJ2luZGV4JyAgPT4gMSwKICAgICAgICAgICAgICAgICAgJ2ZpcnN0JyAgPT4gdHJ1ZSwKICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICBpZiAoaXNfYXJyYXkoJGNvbnRleHRbJ19zZXEnXSkgfHwgKGlzX29iamVjdCgkY29udGV4dFsnX3NlcSddKSAmJiAkY29udGV4dFsnX3NlcSddIGluc3RhbmNlb2YgXENvdW50YWJsZSkpIHsKICAgICAgICAgICAgICAgICAgICAkbGVuZ3RoID0gY291bnQoJGNvbnRleHRbJ19zZXEnXSk7CiAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgwJ10gPSAkbGVuZ3RoIC0gMTsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleCddID0gJGxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsZW5ndGgnXSA9ICRsZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsnbGFzdCddID0gMSA9PT0gJGxlbmd0aDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRjb250ZXh0Wydfc2VxJ10gYXMgJGNvbnRleHRbImNsYXNzIl0gPT4gJGNvbnRleHRbImxvZ3MiXSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMTU5CiAgICAgICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwiXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxNjEKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsiY29udGV4dF9pZCJdID0gKCJjb250ZXh0LWNvbXBpbGVyLSIgLiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvb3AiXSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNjEpKTsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE2MgogICAgICAgICAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImJ0biBidG4tbGluayBzZi10b2dnbGVcIiBkYXRhLXRvZ2dsZS1zZWxlY3Rvcj1cIiMiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMTYzCiAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJjb250ZXh0X2lkIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbnRleHRfaWQiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29udGV4dF9pZCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbnRleHRfaWQiIGRvZXMgbm90IGV4aXN0LicsIDE2MywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIlwiIGRhdGEtdG9nZ2xlLWFsdC1jb250ZW50PVwiIjsKICAgICAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAkY29udGV4dFsiY2xhc3MiXSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICJcIj4iOwogICAgICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICRjb250ZXh0WyJjbGFzcyJdLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvYT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCIiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMTY1CiAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJjb250ZXh0X2lkIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbnRleHRfaWQiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29udGV4dF9pZCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbnRleHRfaWQiIGRvZXMgbm90IGV4aXN0LicsIDE2NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIlwiIGNsYXNzPVwiY29udGV4dCBzZi10b2dnbGUtY29udGVudCBzZi10b2dnbGUtaGlkZGVuXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE2NwogICAgICAgICAgICAgICAgICAgICRjb250ZXh0WydfcGFyZW50J10gPSAkY29udGV4dDsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnX3NlcSddID0gdHdpZ19lbnN1cmVfdHJhdmVyc2FibGUoJGNvbnRleHRbImxvZ3MiXSk7CiAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsiX2tleSJdID0+ICRjb250ZXh0WyJsb2ciXSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE2OAogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPiI7CiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnVuZGxlXFdlYlByb2ZpbGVyQnVuZGxlXFR3aWdcV2ViUHJvZmlsZXJFeHRlbnNpb24nXS0+ZHVtcExvZygkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvZyJdLCAibWVzc2FnZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTY4KSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRfcGFyZW50ID0gJGNvbnRleHRbJ19wYXJlbnQnXTsKICAgICAgICAgICAgICAgICAgICB1bnNldCgkY29udGV4dFsnX3NlcSddLCAkY29udGV4dFsnX2l0ZXJhdGVkJ10sICRjb250ZXh0Wydfa2V5J10sICRjb250ZXh0Wydsb2cnXSwgJGNvbnRleHRbJ19wYXJlbnQnXSwgJGNvbnRleHRbJ2xvb3AnXSk7CiAgICAgICAgICAgICAgICAgICAgJGNvbnRleHQgPSBhcnJheV9pbnRlcnNlY3Rfa2V5KCRjb250ZXh0LCAkX3BhcmVudCkgKyAkX3BhcmVudDsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE3MAogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZm9udC1ub3JtYWwgdGV4dC1yaWdodFwiPiI7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxNzMKICAgICAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2xlbmd0aF9maWx0ZXIoJHRoaXMtPmVudiwgJGNvbnRleHRbImxvZ3MiXSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICsrJGNvbnRleHRbJ2xvb3AnXVsnaW5kZXgwJ107CiAgICAgICAgICAgICAgICAgICAgKyskY29udGV4dFsnbG9vcCddWydpbmRleCddOwogICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2ZpcnN0J10gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJGNvbnRleHRbJ2xvb3AnXVsnbGVuZ3RoJ10pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgwJ107CiAgICAgICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgnXTsKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsnbGFzdCddID0gMCA9PT0gJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgwJ107CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJF9wYXJlbnQgPSAkY29udGV4dFsnX3BhcmVudCddOwogICAgICAgICAgICAgICAgdW5zZXQoJGNvbnRleHRbJ19zZXEnXSwgJGNvbnRleHRbJ19pdGVyYXRlZCddLCAkY29udGV4dFsnY2xhc3MnXSwgJGNvbnRleHRbJ2xvZ3MnXSwgJGNvbnRleHRbJ19wYXJlbnQnXSwgJGNvbnRleHRbJ2xvb3AnXSk7CiAgICAgICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAgICAgLy8gbGluZSAxNzYKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gbGluZSAxNzkKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxzY3JpcHQ+U2Zqcy5jcmVhdGVGaWx0ZXJzKCk7PC9zY3JpcHQ+CiAgICAiOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5sZWF2ZSgkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YpOwoKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5sZWF2ZSgkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YpOwoKICAgIH0KCiAgICAvLyBsaW5lIDE4OAogICAgcHVibGljIGZ1bmN0aW9uIG1hY3JvX3JlbmRlcl90YWJsZSgkX19sb2dzX18gPSBudWxsLCAkX19jYXRlZ29yeV9fID0gIiIsICRfX3Nob3dfbGV2ZWxfXyA9IGZhbHNlLCAkX19pc19kZXByZWNhdGlvbl9fID0gZmFsc2UsIC4uLiRfX3ZhcmFyZ3NfXykKICAgIHsKICAgICAgICAkbWFjcm9zID0gJHRoaXMtPm1hY3JvczsKICAgICAgICAkY29udGV4dCA9ICR0aGlzLT5lbnYtPm1lcmdlR2xvYmFscyhbCiAgICAgICAgICAgICJsb2dzIiA9PiAkX19sb2dzX18sCiAgICAgICAgICAgICJjYXRlZ29yeSIgPT4gJF9fY2F0ZWdvcnlfXywKICAgICAgICAgICAgInNob3dfbGV2ZWwiID0+ICRfX3Nob3dfbGV2ZWxfXywKICAgICAgICAgICAgImlzX2RlcHJlY2F0aW9uIiA9PiAkX19pc19kZXByZWNhdGlvbl9fLAogICAgICAgICAgICAidmFyYXJncyIgPT4gJF9fdmFyYXJnc19fLAogICAgICAgIF0pOwoKICAgICAgICAkYmxvY2tzID0gW107CgogICAgICAgIG9iX3N0YXJ0KCk7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZSA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCdW5kbGVcXFdlYlByb2ZpbGVyQnVuZGxlXFxUd2lnXFxXZWJQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlLT5lbnRlcigkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJtYWNybyIsICJyZW5kZXJfdGFibGUiKSk7CgogICAgICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJyaWRnZVxcVHdpZ1xcRXh0ZW5zaW9uXFxQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICAgICAkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyLT5lbnRlcigkX19pbnRlcm5hbF8zMTkzOTM0NjEzMDk4OTI5MjRmZjZlNzRkNmQ2ZTY0Mjg3ZGY2NGI2MzU0NWI5OTRlMTAwZDRhYjIyM2FlZDAyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJtYWNybyIsICJyZW5kZXJfdGFibGUiKSk7CgogICAgICAgICAgICAvLyBsaW5lIDE4OQogICAgICAgICAgICBlY2hvICIgICAgIjsKICAgICAgICAgICAgJG1hY3Jvc1siaGVscGVyIl0gPSAkdGhpczsKICAgICAgICAgICAgLy8gbGluZSAxOTAKICAgICAgICAgICAgZWNobyAiICAgICI7CiAgICAgICAgICAgICRjb250ZXh0WyJjaGFubmVsX2lzX2RlZmluZWQiXSA9IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2ZpcnN0KCR0aGlzLT5lbnYsIChpc3NldCgkY29udGV4dFsibG9ncyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsb2dzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxvZ3MiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJsb2dzIiBkb2VzIG5vdCBleGlzdC4nLCAxOTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSksICJjaGFubmVsIiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgMTkwKTsKICAgICAgICAgICAgLy8gbGluZSAxOTEKICAgICAgICAgICAgZWNobyAiICAgICI7CiAgICAgICAgICAgICRjb250ZXh0WyJmaWx0ZXIiXSA9ICgoaXNzZXQoJGNvbnRleHRbInNob3dfbGV2ZWwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygic2hvd19sZXZlbCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJzaG93X2xldmVsIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAic2hvd19sZXZlbCIgZG9lcyBub3QgZXhpc3QuJywgMTkxLCAkdGhpcy0+c291cmNlKTsgfSkoKSkgfHwgKGlzc2V0KCRjb250ZXh0WyJjaGFubmVsX2lzX2RlZmluZWQiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY2hhbm5lbF9pc19kZWZpbmVkIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNoYW5uZWxfaXNfZGVmaW5lZCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNoYW5uZWxfaXNfZGVmaW5lZCIgZG9lcyBub3QgZXhpc3QuJywgMTkxLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpOwogICAgICAgICAgICAvLyBsaW5lIDE5MgogICAgICAgICAgICBlY2hvICIKICAgIDx0YWJsZSBjbGFzcz1cImxvZ3NcIiI7CiAgICAgICAgICAgIC8vIGxpbmUgMTkzCiAgICAgICAgICAgIGlmICgoaXNzZXQoJGNvbnRleHRbInNob3dfbGV2ZWwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygic2hvd19sZXZlbCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJzaG93X2xldmVsIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAic2hvd19sZXZlbCIgZG9lcyBub3QgZXhpc3QuJywgMTkzLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpIHsKICAgICAgICAgICAgICAgIGVjaG8gIiBkYXRhLWZpbHRlci1sZXZlbD1cIkVtZXJnZW5jeSxBbGVydCxDcml0aWNhbCxFcnJvcixXYXJuaW5nLE5vdGljZSxJbmZvXCIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgoaXNzZXQoJGNvbnRleHRbImZpbHRlciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJmaWx0ZXIiLCAkY29udGV4dCkgPyAkY29udGV4dFsiZmlsdGVyIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiZmlsdGVyIiBkb2VzIG5vdCBleGlzdC4nLCAxOTMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgZWNobyAiIGRhdGEtZmlsdGVycyI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWNobyAiPgogICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgLy8gbGluZSAxOTYKICAgICAgICAgICAgaWYgKChpc3NldCgkY29udGV4dFsic2hvd19sZXZlbCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJzaG93X2xldmVsIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInNob3dfbGV2ZWwiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJzaG93X2xldmVsIiBkb2VzIG5vdCBleGlzdC4nLCAxOTYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgZWNobyAiPHRoIGRhdGEtZmlsdGVyPVwibGV2ZWxcIj5MZXZlbDwvdGg+IjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGVjaG8gIjx0aD5UaW1lPC90aD4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxpbmUgMTk3CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICBpZiAoKGlzc2V0KCRjb250ZXh0WyJjaGFubmVsX2lzX2RlZmluZWQiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY2hhbm5lbF9pc19kZWZpbmVkIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNoYW5uZWxfaXNfZGVmaW5lZCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNoYW5uZWxfaXNfZGVmaW5lZCIgZG9lcyBub3QgZXhpc3QuJywgMTk3LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpIHsKICAgICAgICAgICAgICAgIGVjaG8gIjx0aCBkYXRhLWZpbHRlcj1cImNoYW5uZWxcIj5DaGFubmVsPC90aD4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxpbmUgMTk4CiAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJmdWxsLXdpZHRoXCI+TWVzc2FnZTwvdGg+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KCiAgICAgICAgPHRib2R5PgogICAgICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDIwMwogICAgICAgICAgICAkY29udGV4dFsnX3BhcmVudCddID0gJGNvbnRleHQ7CiAgICAgICAgICAgICRjb250ZXh0Wydfc2VxJ10gPSB0d2lnX2Vuc3VyZV90cmF2ZXJzYWJsZSgoaXNzZXQoJGNvbnRleHRbImxvZ3MiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygibG9ncyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJsb2dzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAibG9ncyIgZG9lcyBub3QgZXhpc3QuJywgMjAzLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpOwogICAgICAgICAgICAkY29udGV4dFsnbG9vcCddID0gWwogICAgICAgICAgICAgICdwYXJlbnQnID0+ICRjb250ZXh0WydfcGFyZW50J10sCiAgICAgICAgICAgICAgJ2luZGV4MCcgPT4gMCwKICAgICAgICAgICAgICAnaW5kZXgnICA9PiAxLAogICAgICAgICAgICAgICdmaXJzdCcgID0+IHRydWUsCiAgICAgICAgICAgIF07CiAgICAgICAgICAgIGlmIChpc19hcnJheSgkY29udGV4dFsnX3NlcSddKSB8fCAoaXNfb2JqZWN0KCRjb250ZXh0Wydfc2VxJ10pICYmICRjb250ZXh0Wydfc2VxJ10gaW5zdGFuY2VvZiBcQ291bnRhYmxlKSkgewogICAgICAgICAgICAgICAgJGxlbmd0aCA9IGNvdW50KCRjb250ZXh0Wydfc2VxJ10pOwogICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgwJ10gPSAkbGVuZ3RoIC0gMTsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4J10gPSAkbGVuZ3RoOwogICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsnbGVuZ3RoJ10gPSAkbGVuZ3RoOwogICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsnbGFzdCddID0gMSA9PT0gJGxlbmd0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3JlYWNoICgkY29udGV4dFsnX3NlcSddIGFzICRjb250ZXh0WyJfa2V5Il0gPT4gJGNvbnRleHRbImxvZyJdKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDIwNAogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAkY29udGV4dFsiY3NzX2NsYXNzIl0gPSAoKChpc3NldCgkY29udGV4dFsiaXNfZGVwcmVjYXRpb24iXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiaXNfZGVwcmVjYXRpb24iLCAkY29udGV4dCkgPyAkY29udGV4dFsiaXNfZGVwcmVjYXRpb24iXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJpc19kZXByZWNhdGlvbiIgZG9lcyBub3QgZXhpc3QuJywgMjA0LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpID8gKCIiKSA6ICgoKHR3aWdfaW5fZmlsdGVyKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAgICAgICAgICAgICAgICAgLy8gbGluZSAyMDUKJGNvbnRleHRbImxvZyJdLCAicHJpb3JpdHlOYW1lIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDUpLCBbMCA9PiAiQ1JJVElDQUwiLCAxID0+ICJFUlJPUiIsIDIgPT4gIkFMRVJUIiwgMyA9PiAiRU1FUkdFTkNZIl0pKSA/ICgic3RhdHVzLWVycm9yIikgOiAoKCgoMCA9PT0gdHdpZ19jb21wYXJlKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAgICAgICAgICAgICAgICAgLy8gbGluZSAyMDYKJGNvbnRleHRbImxvZyJdLCAicHJpb3JpdHlOYW1lIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDYpLCAiV0FSTklORyIpKSkgPyAoInN0YXR1cy13YXJuaW5nIikgOiAoIiIpKSkpKSk7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDIwOAogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cIiI7CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbImNzc19jbGFzcyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjc3NfY2xhc3MiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY3NzX2NsYXNzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY3NzX2NsYXNzIiBkb2VzIG5vdCBleGlzdC4nLCAyMDgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVjaG8gIlwiIjsKICAgICAgICAgICAgICAgIGlmICgoaXNzZXQoJGNvbnRleHRbInNob3dfbGV2ZWwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygic2hvd19sZXZlbCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJzaG93X2xldmVsIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAic2hvd19sZXZlbCIgZG9lcyBub3QgZXhpc3QuJywgMjA4LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpIHsKICAgICAgICAgICAgICAgICAgICBlY2hvICIgZGF0YS1maWx0ZXItbGV2ZWw9XCIiOwogICAgICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfbG93ZXJfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9nIl0sICJwcmlvcml0eU5hbWUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIwOCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIlwiIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICgoaXNzZXQoJGNvbnRleHRbImNoYW5uZWxfaXNfZGVmaW5lZCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjaGFubmVsX2lzX2RlZmluZWQiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY2hhbm5lbF9pc19kZWZpbmVkIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY2hhbm5lbF9pc19kZWZpbmVkIiBkb2VzIG5vdCBleGlzdC4nLCAyMDgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgICAgIGVjaG8gIiBkYXRhLWZpbHRlci1jaGFubmVsPVwiIjsKICAgICAgICAgICAgICAgICAgICAoKCAhKG51bGwgPT09IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9nIl0sICJjaGFubmVsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDgpKSkgPyAocHJpbnQgKHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvZyJdLCAiY2hhbm5lbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjA4KSwgImh0bWwiLCBudWxsLCB0cnVlKSkpIDogKHByaW50ICgiIikpKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICJcIiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlY2hvICI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZm9udC1ub3JtYWwgdGV4dC1zbWFsbFwiIG5vd3JhcD4KICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjEwCiAgICAgICAgICAgICAgICBpZiAoKGlzc2V0KCRjb250ZXh0WyJzaG93X2xldmVsIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInNob3dfbGV2ZWwiLCAkY29udGV4dCkgPyAkY29udGV4dFsic2hvd19sZXZlbCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInNob3dfbGV2ZWwiIGRvZXMgbm90IGV4aXN0LicsIDIxMCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMTEKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb2xvcmVkIHRleHQtYm9sZFwiPiI7CiAgICAgICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb2ciXSwgInByaW9yaXR5TmFtZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjExKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBlY2hvICI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDIxMwogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgPHRpbWUgY2xhc3M9XCJ0ZXh0LW11dGVkIG5ld2xpbmVcIiB0aXRsZT1cIiI7CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2RhdGVfZm9ybWF0X2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvZyJdLCAidGltZXN0YW1wIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMTMpLCAiciIpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgZWNobyAiXCIgZGF0ZXRpbWU9XCIiOwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19kYXRlX2Zvcm1hdF9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb2ciXSwgInRpbWVzdGFtcCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjEzKSwgImMiKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVjaG8gIlwiPiI7CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2RhdGVfZm9ybWF0X2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvZyJdLCAidGltZXN0YW1wIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMTMpLCAiSDppOnMiKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVjaG8gIjwvdGltZT4KICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAyMTYKICAgICAgICAgICAgICAgIGlmICgoaXNzZXQoJGNvbnRleHRbImNoYW5uZWxfaXNfZGVmaW5lZCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjaGFubmVsX2lzX2RlZmluZWQiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY2hhbm5lbF9pc19kZWZpbmVkIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY2hhbm5lbF9pc19kZWZpbmVkIiBkb2VzIG5vdCBleGlzdC4nLCAyMTYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjE3CiAgICAgICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZm9udC1ub3JtYWwgdGV4dC1zbWFsbCB0ZXh0LWJvbGRcIiBub3dyYXA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjE4CiAgICAgICAgICAgICAgICAgICAgaWYgKChudWxsID09PSB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvZyJdLCAiY2hhbm5lbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjE4KSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPGVtPm4vYTwvZW0+IjsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvZyJdLCAiY2hhbm5lbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjE4KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMTkKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICBpZiAoKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9nIl0sICJlcnJvckNvdW50IiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgMjE5KSAmJiAoMSA9PT0gdHdpZ19jb21wYXJlKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9nIl0sICJlcnJvckNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMTkpLCAxKSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjIwCiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkXCI+KCI7CiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9nIl0sICJlcnJvckNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMjApLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICIgdGltZXMpPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMjIKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAyMjUKICAgICAgICAgICAgICAgIGVjaG8gIgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsXCI+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjI2CiAgICAgICAgICAgICAgICBlY2hvIHR3aWdfY2FsbF9tYWNybygkbWFjcm9zWyJoZWxwZXIiXSwgIm1hY3JvX3JlbmRlcl9sb2dfbWVzc2FnZSIsIFsoaXNzZXQoJGNvbnRleHRbImNhdGVnb3J5Il0pIHx8IGFycmF5X2tleV9leGlzdHMoImNhdGVnb3J5IiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNhdGVnb3J5Il0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY2F0ZWdvcnkiIGRvZXMgbm90IGV4aXN0LicsIDIyNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvb3AiXSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMjYpLCAkY29udGV4dFsibG9nIl1dLCAyMjYsICRjb250ZXh0LCAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpKTsKICAgICAgICAgICAgICAgIGVjaG8gIjwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgKyskY29udGV4dFsnbG9vcCddWydpbmRleDAnXTsKICAgICAgICAgICAgICAgICsrJGNvbnRleHRbJ2xvb3AnXVsnaW5kZXgnXTsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2ZpcnN0J10gPSBmYWxzZTsKICAgICAgICAgICAgICAgIGlmIChpc3NldCgkY29udGV4dFsnbG9vcCddWydsZW5ndGgnXSkpIHsKICAgICAgICAgICAgICAgICAgICAtLSRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4MCddOwogICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgnXTsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsYXN0J10gPSAwID09PSAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleDAnXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAkX3BhcmVudCA9ICRjb250ZXh0WydfcGFyZW50J107CiAgICAgICAgICAgIHVuc2V0KCRjb250ZXh0Wydfc2VxJ10sICRjb250ZXh0WydfaXRlcmF0ZWQnXSwgJGNvbnRleHRbJ19rZXknXSwgJGNvbnRleHRbJ2xvZyddLCAkY29udGV4dFsnX3BhcmVudCddLCAkY29udGV4dFsnbG9vcCddKTsKICAgICAgICAgICAgJGNvbnRleHQgPSBhcnJheV9pbnRlcnNlY3Rfa2V5KCRjb250ZXh0LCAkX3BhcmVudCkgKyAkX3BhcmVudDsKICAgICAgICAgICAgLy8gbGluZSAyMjkKICAgICAgICAgICAgZWNobyAiICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KIjsKICAgICAgICAgICAgCiAgICAgICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmxlYXZlKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZik7CgogICAgICAgICAgICAKICAgICAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+bGVhdmUoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mKTsKCgogICAgICAgICAgICByZXR1cm4gKCcnID09PSAkdG1wID0gb2JfZ2V0X2NvbnRlbnRzKCkpID8gJycgOiBuZXcgTWFya3VwKCR0bXAsICR0aGlzLT5lbnYtPmdldENoYXJzZXQoKSk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgb2JfZW5kX2NsZWFuKCk7CiAgICAgICAgfQogICAgfQoKICAgIC8vIGxpbmUgMjMzCiAgICBwdWJsaWMgZnVuY3Rpb24gbWFjcm9fcmVuZGVyX2xvZ19tZXNzYWdlKCRfX2NhdGVnb3J5X18gPSBudWxsLCAkX19sb2dfaW5kZXhfXyA9IG51bGwsICRfX2xvZ19fID0gbnVsbCwgLi4uJF9fdmFyYXJnc19fKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRjb250ZXh0ID0gJHRoaXMtPmVudi0+bWVyZ2VHbG9iYWxzKFsKICAgICAgICAgICAgImNhdGVnb3J5IiA9PiAkX19jYXRlZ29yeV9fLAogICAgICAgICAgICAibG9nX2luZGV4IiA9PiAkX19sb2dfaW5kZXhfXywKICAgICAgICAgICAgImxvZyIgPT4gJF9fbG9nX18sCiAgICAgICAgICAgICJ2YXJhcmdzIiA9PiAkX192YXJhcmdzX18sCiAgICAgICAgXSk7CgogICAgICAgICRibG9ja3MgPSBbXTsKCiAgICAgICAgb2Jfc3RhcnQoKTsKICAgICAgICB0cnkgewogICAgICAgICAgICAkX19pbnRlcm5hbF8wODViMDE0MjgwNjIwMjU5OWM3ZmUzYjMyOTE2NGE5MjM5N2Q4OTc4MjA3YTM3ZTc5ZDcwYjhjNTI1OTllMzNlID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgICAgICRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2UtPmVudGVyKCRfX2ludGVybmFsXzA4NWIwMTQyODA2MjAyNTk5YzdmZTNiMzI5MTY0YTkyMzk3ZDg5NzgyMDdhMzdlNzlkNzBiOGM1MjU5OWUzM2VfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgIm1hY3JvIiwgInJlbmRlcl9sb2dfbWVzc2FnZSIpKTsKCiAgICAgICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmVudGVyKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgIm1hY3JvIiwgInJlbmRlcl9sb2dfbWVzc2FnZSIpKTsKCiAgICAgICAgICAgIC8vIGxpbmUgMjM0CiAgICAgICAgICAgIGVjaG8gIiAgICAiOwogICAgICAgICAgICAkY29udGV4dFsiaGFzX2NvbnRleHQiXSA9ICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKCRjb250ZXh0WyJsb2ciXSA/PyBudWxsKSwgImNvbnRleHQiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyMzQpICYmICAhdHdpZ190ZXN0X2VtcHR5KHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImxvZyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsb2ciLCAkY29udGV4dCkgPyAkY29udGV4dFsibG9nIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAibG9nIiBkb2VzIG5vdCBleGlzdC4nLCAyMzQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvbnRleHQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIzNCkpKTsKICAgICAgICAgICAgLy8gbGluZSAyMzUKICAgICAgICAgICAgZWNobyAiICAgICI7CiAgICAgICAgICAgICRjb250ZXh0WyJoYXNfdHJhY2UiXSA9IHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICgkY29udGV4dFsibG9nIl0gPz8gbnVsbCksICJjb250ZXh0IiwgW10sICJhbnkiLCBmYWxzZSwgdHJ1ZSwgZmFsc2UsIDIzNSksICJleGNlcHRpb24iLCBbXSwgImFueSIsIGZhbHNlLCB0cnVlLCBmYWxzZSwgMjM1KSwgInRyYWNlIiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgMjM1KTsKICAgICAgICAgICAgLy8gbGluZSAyMzYKICAgICAgICAgICAgZWNobyAiCiAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDIzNwogICAgICAgICAgICBpZiAoICEoaXNzZXQoJGNvbnRleHRbImhhc19jb250ZXh0Il0pIHx8IGFycmF5X2tleV9leGlzdHMoImhhc19jb250ZXh0IiwgJGNvbnRleHQpID8gJGNvbnRleHRbImhhc19jb250ZXh0Il0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiaGFzX2NvbnRleHQiIGRvZXMgbm90IGV4aXN0LicsIDIzNywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDIzOAogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAiOwogICAgICAgICAgICAgICAgZWNobyAkdGhpcy0+ZXh0ZW5zaW9uc1snU3ltZm9ueVxCdW5kbGVcV2ViUHJvZmlsZXJCdW5kbGVcVHdpZ1xXZWJQcm9maWxlckV4dGVuc2lvbiddLT5kdW1wTG9nKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImxvZyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsb2ciLCAkY29udGV4dCkgPyAkY29udGV4dFsibG9nIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAibG9nIiBkb2VzIG5vdCBleGlzdC4nLCAyMzgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgIm1lc3NhZ2UiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIzOCkpOwogICAgICAgICAgICAgICAgZWNobyAiCiAgICAiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gbGluZSAyNDAKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgIjsKICAgICAgICAgICAgICAgIGVjaG8gJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnVuZGxlXFdlYlByb2ZpbGVyQnVuZGxlXFR3aWdcV2ViUHJvZmlsZXJFeHRlbnNpb24nXS0+ZHVtcExvZygkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJsb2ciXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygibG9nIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxvZyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxvZyIgZG9lcyBub3QgZXhpc3QuJywgMjQwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJtZXNzYWdlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDApLCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJsb2ciXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygibG9nIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxvZyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxvZyIgZG9lcyBub3QgZXhpc3QuJywgMjQwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb250ZXh0IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDApKTsKICAgICAgICAgICAgICAgIGVjaG8gIgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1zbWFsbCBmb250LW5vcm1hbFwiPgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAyNDMKICAgICAgICAgICAgICAgICRjb250ZXh0WyJjb250ZXh0X2lkIl0gPSAoKCgiY29udGV4dC0iIC4gKGlzc2V0KCRjb250ZXh0WyJjYXRlZ29yeSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjYXRlZ29yeSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjYXRlZ29yeSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNhdGVnb3J5IiBkb2VzIG5vdCBleGlzdC4nLCAyNDMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgLiAiLSIpIC4gKGlzc2V0KCRjb250ZXh0WyJsb2dfaW5kZXgiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygibG9nX2luZGV4IiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxvZ19pbmRleCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxvZ19pbmRleCIgZG9lcyBub3QgZXhpc3QuJywgMjQzLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpOwogICAgICAgICAgICAgICAgLy8gbGluZSAyNDQKICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgIDxhIGNsYXNzPVwiYnRuIGJ0bi1saW5rIHRleHQtc21hbGwgc2YtdG9nZ2xlXCIgZGF0YS10b2dnbGUtc2VsZWN0b3I9XCIjIjsKICAgICAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIChpc3NldCgkY29udGV4dFsiY29udGV4dF9pZCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb250ZXh0X2lkIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbnRleHRfaWQiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb250ZXh0X2lkIiBkb2VzIG5vdCBleGlzdC4nLCAyNDQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIGVjaG8gIlwiIGRhdGEtdG9nZ2xlLWFsdC1jb250ZW50PVwiSGlkZSBjb250ZXh0XCI+U2hvdyBjb250ZXh0PC9hPgoKICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjQ2CiAgICAgICAgICAgICAgICBpZiAoKGlzc2V0KCRjb250ZXh0WyJoYXNfdHJhY2UiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiaGFzX3RyYWNlIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImhhc190cmFjZSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImhhc190cmFjZSIgZG9lcyBub3QgZXhpc3QuJywgMjQ2LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0NwogICAgICAgICAgICAgICAgICAgIGVjaG8gIiAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsKICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNDgKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsidHJhY2VfaWQiXSA9ICgoKCJ0cmFjZS0iIC4gKGlzc2V0KCRjb250ZXh0WyJjYXRlZ29yeSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjYXRlZ29yeSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjYXRlZ29yeSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNhdGVnb3J5IiBkb2VzIG5vdCBleGlzdC4nLCAyNDgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgLiAiLSIpIC4gKGlzc2V0KCRjb250ZXh0WyJsb2dfaW5kZXgiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygibG9nX2luZGV4IiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxvZ19pbmRleCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxvZ19pbmRleCIgZG9lcyBub3QgZXhpc3QuJywgMjQ4LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjQ5CiAgICAgICAgICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiYnRuIGJ0bi1saW5rIHRleHQtc21hbGwgc2YtdG9nZ2xlXCIgZGF0YS10b2dnbGUtc2VsZWN0b3I9XCIjIjsKICAgICAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbInRyYWNlX2lkIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInRyYWNlX2lkIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInRyYWNlX2lkIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAidHJhY2VfaWQiIGRvZXMgbm90IGV4aXN0LicsIDI0OSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIlwiIGRhdGEtdG9nZ2xlLWFsdC1jb250ZW50PVwiSGlkZSB0cmFjZVwiPlNob3cgdHJhY2U8L2E+CiAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDI1MQogICAgICAgICAgICAgICAgZWNobyAiICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBpZD1cIiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDI1MwogICAgICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgKGlzc2V0KCRjb250ZXh0WyJjb250ZXh0X2lkIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbnRleHRfaWQiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29udGV4dF9pZCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbnRleHRfaWQiIGRvZXMgbm90IGV4aXN0LicsIDI1MywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgZWNobyAiXCIgY2xhc3M9XCJjb250ZXh0IHNmLXRvZ2dsZS1jb250ZW50IHNmLXRvZ2dsZS1oaWRkZW5cIj4KICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMjU0CiAgICAgICAgICAgICAgICBlY2hvICR0aGlzLT5leHRlbnNpb25zWydTeW1mb255XEJ1bmRsZVxXZWJQcm9maWxlckJ1bmRsZVxUd2lnXFdlYlByb2ZpbGVyRXh0ZW5zaW9uJ10tPmR1bXBEYXRhKCR0aGlzLT5lbnYsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImxvZyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsb2ciLCAkY29udGV4dCkgPyAkY29udGV4dFsibG9nIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAibG9nIiBkb2VzIG5vdCBleGlzdC4nLCAyNTQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvbnRleHQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI1NCksIDEpOwogICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgPC9kaXY+CgogICAgICAgICI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDI1NwogICAgICAgICAgICAgICAgaWYgKChpc3NldCgkY29udGV4dFsiaGFzX3RyYWNlIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImhhc190cmFjZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJoYXNfdHJhY2UiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJoYXNfdHJhY2UiIGRvZXMgbm90IGV4aXN0LicsIDI1NywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNTgKICAgICAgICAgICAgICAgICAgICBlY2hvICIgICAgICAgICAgICA8ZGl2IGlkPVwiIjsKICAgICAgICAgICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbInRyYWNlX2lkIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInRyYWNlX2lkIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInRyYWNlX2lkIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAidHJhY2VfaWQiIGRvZXMgbm90IGV4aXN0LicsIDI1OCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gIlwiIGNsYXNzPVwiY29udGV4dCBzZi10b2dnbGUtY29udGVudCBzZi10b2dnbGUtaGlkZGVuXCI+CiAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjU5CiAgICAgICAgICAgICAgICAgICAgZWNobyAkdGhpcy0+ZXh0ZW5zaW9uc1snU3ltZm9ueVxCdW5kbGVcV2ViUHJvZmlsZXJCdW5kbGVcVHdpZ1xXZWJQcm9maWxlckV4dGVuc2lvbiddLT5kdW1wRGF0YSgkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImxvZyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsb2ciLCAkY29udGV4dCkgPyAkY29udGV4dFsibG9nIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAibG9nIiBkb2VzIG5vdCBleGlzdC4nLCAyNTksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvbnRleHQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI1OSksICJleGNlcHRpb24iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI1OSksICJ0cmFjZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjU5KSwgMSk7CiAgICAgICAgICAgICAgICAgICAgZWNobyAiCiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDI2MgogICAgICAgICAgICAgICAgZWNobyAiICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgICRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDItPmxlYXZlKCRfX2ludGVybmFsXzMxOTM5MzQ2MTMwOTg5MjkyNGZmNmU3NGQ2ZDZlNjQyODdkZjY0YjYzNTQ1Yjk5NGUxMDBkNGFiMjIzYWVkMDJfcHJvZik7CgogICAgICAgICAgICAKICAgICAgICAgICAgJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZS0+bGVhdmUoJF9faW50ZXJuYWxfMDg1YjAxNDI4MDYyMDI1OTljN2ZlM2IzMjkxNjRhOTIzOTdkODk3ODIwN2EzN2U3OWQ3MGI4YzUyNTk5ZTMzZV9wcm9mKTsKCgogICAgICAgICAgICByZXR1cm4gKCcnID09PSAkdG1wID0gb2JfZ2V0X2NvbnRlbnRzKCkpID8gJycgOiBuZXcgTWFya3VwKCR0bXAsICR0aGlzLT5lbnYtPmdldENoYXJzZXQoKSk7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgb2JfZW5kX2NsZWFuKCk7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRUZW1wbGF0ZU5hbWUoKQogICAgewogICAgICAgIHJldHVybiAiQFdlYlByb2ZpbGVyL0NvbGxlY3Rvci9sb2dnZXIuaHRtbC50d2lnIjsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gaXNUcmFpdGFibGUoKQogICAgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0RGVidWdJbmZvKCkKICAgIHsKICAgICAgICByZXR1cm4gYXJyYXkgKCAgODA3ID0+IDI2MiwgIDgwMSA9PiAyNTksICA3OTYgPT4gMjU4LCAgNzk0ID0+IDI1NywgIDc4OCA9PiAyNTQsICA3ODQgPT4gMjUzLCAgNzgwID0+IDI1MSwgIDc3NCA9PiAyNDksICA3NzIgPT4gMjQ4LCAgNzY5ID0+IDI0NywgIDc2NyA9PiAyNDYsICA3NjEgPT4gMjQ0LCAgNzU5ID0+IDI0MywgIDc1MiA9PiAyNDAsICA3NDYgPT4gMjM4LCAgNzQ0ID0+IDIzNywgIDc0MSA9PiAyMzYsICA3MzggPT4gMjM1LCAgNzM1ID0+IDIzNCwgIDcxNCA9PiAyMzMsICA2OTcgPT4gMjI5LCAgNjgwID0+IDIyNiwgIDY3NyA9PiAyMjUsICA2NzIgPT4gMjIyLCAgNjY2ID0+IDIyMCwgIDY2MyA9PiAyMTksICA2NTcgPT4gMjE4LCAgNjU0ID0+IDIxNywgIDY1MiA9PiAyMTYsICA2NDEgPT4gMjEzLCAgNjM1ID0+IDIxMSwgIDYzMyA9PiAyMTAsICA2MTYgPT4gMjA4LCAgNjE0ID0+IDIwNiwgIDYxMyA9PiAyMDUsICA2MTEgPT4gMjA0LCAgNTk0ID0+IDIwMywgIDU4NyA9PiAxOTgsICA1ODIgPT4gMTk3LCAgNTc2ID0+IDE5NiwgIDU2NSA9PiAxOTMsICA1NjIgPT4gMTkyLCAgNTU5ID0+IDE5MSwgIDU1NiA9PiAxOTAsICA1NTMgPT4gMTg5LCAgNTMxID0+IDE4OCwgIDUxNCA9PiAxNzksICA1MDkgPT4gMTc2LCAgNDkyID0+IDE3MywgIDQ4NyA9PiAxNzAsICA0NzggPT4gMTY4LCAgNDc0ID0+IDE2NywgIDQ2OSA9PiAxNjUsICA0NjAgPT4gMTYzLCAgNDU3ID0+IDE2MiwgIDQ1NSA9PiAxNjEsICA0NTEgPT4gMTU5LCAgNDM0ID0+IDE1OCwgIDQyMyA9PiAxNDksICA0MTcgPT4gMTQ1LCAgNDE1ID0+IDE0NCwgIDQwOCA9PiAxNDAsICA0MDUgPT4gMTM5LCAgMzk5ID0+IDEzOCwgIDM5NiA9PiAxMzcsICAzOTEgPT4gMTM2LCAgMzg5ID0+IDEzNSwgIDM4NCA9PiAxMzIsICAzNzggPT4gMTMwLCAgMzcyID0+IDEyNiwgIDM3MCA9PiAxMjUsICAzNjMgPT4gMTIxLCAgMzU3ID0+IDExNywgIDM1MSA9PiAxMTUsICAzNDUgPT4gMTExLCAgMzQzID0+IDExMCwgIDMzNiA9PiAxMDYsICAzMzAgPT4gMTAyLCAgMzI0ID0+IDEwMCwgIDMxOCA9PiA5NiwgIDMxNiA9PiA5NSwgIDMwNiA9PiA5MSwgIDMwMiA9PiA4OCwgIDI5NyA9PiA4NSwgIDI5MSA9PiA4MywgIDI4NSA9PiA3OSwgIDI4MyA9PiA3OCwgIDI3NCA9PiA3NCwgIDI3MCA9PiA3MywgIDI2NiA9PiA3MSwgIDI2MCA9PiA3MCwgIDI1NyA9PiA2OSwgIDI1NCA9PiA2OCwgIDI1MSA9PiA2NywgIDI0OCA9PiA2NiwgIDI0NSA9PiA2NSwgIDI0MiA9PiA2NCwgIDIzOSA9PiA2MywgIDIzNiA9PiA2MiwgIDIzMyA9PiA2MSwgIDIzMCA9PiA2MCwgIDIyNyA9PiA1OSwgIDIyNCA9PiA1OCwgIDIxOSA9PiA1NywgIDIxNiA9PiA1NiwgIDIxMyA9PiA1NSwgIDIxMSA9PiA1NCwgIDIwNSA9PiA1MCwgIDIwMyA9PiA0OSwgIDE5OSA9PiA0NywgIDE4OSA9PiA0NiwgIDE3OCA9PiA0MywgIDE3MiA9PiA0MCwgIDE2OSA9PiAzOSwgIDE2NyA9PiAzOCwgIDE2MiA9PiAzNiwgIDE1NSA9PiAzNSwgIDE0NSA9PiAzNCwgIDEzMiA9PiAzMCwgIDEyOSA9PiAyOSwgIDEyMSA9PiAyNiwgIDExMSA9PiAyMSwgIDEwMSA9PiAxNiwgIDk3ID0+IDE0LCAgOTUgPT4gMTMsICA5MiA9PiAxMiwgIDg3ID0+IDEwLCAgODIgPT4gOSwgIDc5ID0+IDgsICA3NiA9PiA3LCAgNzMgPT4gNiwgIDYzID0+IDUsICA1MiA9PiAxLCAgNTAgPT4gMywgIDM3ID0+IDEsKTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0U291cmNlQ29udGV4dCgpCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyBTb3VyY2UoInslIGV4dGVuZHMgJ0BXZWJQcm9maWxlci9Qcm9maWxlci9sYXlvdXQuaHRtbC50d2lnJyAlfQoKeyUgaW1wb3J0IF9zZWxmIGFzIGhlbHBlciAlfQoKeyUgYmxvY2sgdG9vbGJhciAlfQogICAgeyUgaWYgY29sbGVjdG9yLmNvdW50ZXJyb3JzIG9yIGNvbGxlY3Rvci5jb3VudGRlcHJlY2F0aW9ucyBvciBjb2xsZWN0b3IuY291bnR3YXJuaW5ncyAlfQogICAgICAgIHslIHNldCBpY29uICV9CiAgICAgICAgICAgIHslIHNldCBzdGF0dXNfY29sb3IgPSBjb2xsZWN0b3IuY291bnRlcnJvcnMgPyAncmVkJyA6ICd5ZWxsb3cnICV9CiAgICAgICAgICAgIHt7IGluY2x1ZGUoJ0BXZWJQcm9maWxlci9JY29uL2xvZ2dlci5zdmcnKSB9fQogICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItdmFsdWVcIj57eyBjb2xsZWN0b3IuY291bnRlcnJvcnMgPzogKGNvbGxlY3Rvci5jb3VudGRlcHJlY2F0aW9ucyArIGNvbGxlY3Rvci5jb3VudHdhcm5pbmdzKSB9fTwvc3Bhbj4KICAgICAgICB7JSBlbmRzZXQgJX0KCiAgICAgICAgeyUgc2V0IHRleHQgJX0KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+RXJyb3JzPC9iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy17eyBjb2xsZWN0b3IuY291bnRlcnJvcnMgPyAncmVkJyB9fVwiPnt7IGNvbGxlY3Rvci5jb3VudGVycm9yc3xkZWZhdWx0KDApIH19PC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPldhcm5pbmdzPC9iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy17eyBjb2xsZWN0b3IuY291bnR3YXJuaW5ncyA/ICd5ZWxsb3cnIH19XCI+e3sgY29sbGVjdG9yLmNvdW50d2FybmluZ3N8ZGVmYXVsdCgwKSB9fTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICA8Yj5EZXByZWNhdGlvbnM8L2I+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItc3RhdHVzIHNmLXRvb2xiYXItc3RhdHVzLXt7IGNvbGxlY3Rvci5jb3VudGRlcHJlY2F0aW9ucyA/ICd5ZWxsb3cnIH19XCI+e3sgY29sbGVjdG9yLmNvdW50ZGVwcmVjYXRpb25zfGRlZmF1bHQoMCkgfX08L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIHslIGVuZHNldCAlfQoKICAgICAgICB7eyBpbmNsdWRlKCdAV2ViUHJvZmlsZXIvUHJvZmlsZXIvdG9vbGJhcl9pdGVtLmh0bWwudHdpZycsIHsgbGluazogcHJvZmlsZXJfdXJsLCBzdGF0dXM6IHN0YXR1c19jb2xvciB9KSB9fQogICAgeyUgZW5kaWYgJX0KeyUgZW5kYmxvY2sgJX0KCnslIGJsb2NrIG1lbnUgJX0KICAgIDxzcGFuIGNsYXNzPVwibGFiZWwgbGFiZWwtc3RhdHVzLXt7IGNvbGxlY3Rvci5jb3VudGVycm9ycyA/ICdlcnJvcicgOiBjb2xsZWN0b3IuY291bnRkZXByZWNhdGlvbnMgb3IgY29sbGVjdG9yLmNvdW50d2FybmluZ3MgPyAnd2FybmluZycgfX0ge3sgY29sbGVjdG9yLmxvZ3MgaXMgZW1wdHkgPyAnZGlzYWJsZWQnIH19XCI+CiAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+e3sgaW5jbHVkZSgnQFdlYlByb2ZpbGVyL0ljb24vbG9nZ2VyLnN2ZycpIH19PC9zcGFuPgogICAgICAgIDxzdHJvbmc+TG9nczwvc3Ryb25nPgogICAgICAgIHslIGlmIGNvbGxlY3Rvci5jb3VudGVycm9ycyBvciBjb2xsZWN0b3IuY291bnRkZXByZWNhdGlvbnMgb3IgY29sbGVjdG9yLmNvdW50d2FybmluZ3MgJX0KICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb3VudFwiPgogICAgICAgICAgICAgICAgPHNwYW4+e3sgY29sbGVjdG9yLmNvdW50ZXJyb3JzID86IChjb2xsZWN0b3IuY291bnRkZXByZWNhdGlvbnMgKyBjb2xsZWN0b3IuY291bnR3YXJuaW5ncykgfX08L3NwYW4+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICB7JSBlbmRpZiAlfQogICAgPC9zcGFuPgp7JSBlbmRibG9jayAlfQoKeyUgYmxvY2sgcGFuZWwgJX0KICAgIDxoMj5Mb2cgTWVzc2FnZXM8L2gyPgoKICAgIHslIGlmIGNvbGxlY3Rvci5sb2dzIGlzIGVtcHR5ICV9CiAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgIDxwPk5vIGxvZyBtZXNzYWdlcyBhdmFpbGFibGUuPC9wPgogICAgICAgIDwvZGl2PgogICAgeyUgZWxzZSAlfQogICAgICAgIHsjIHNvcnQgY29sbGVjdGVkIGxvZ3MgaW4gZ3JvdXBzICN9CiAgICAgICAgeyUgc2V0IGRlcHJlY2F0aW9uX2xvZ3MsIGRlYnVnX2xvZ3MsIGluZm9fYW5kX2Vycm9yX2xvZ3MsIHNpbGVuY2VkX2xvZ3MgPSBbXSwgW10sIFtdLCBbXSAlfQogICAgICAgIHslIHNldCBoYXNfZXJyb3JfbG9ncyA9IGZhbHNlICV9CiAgICAgICAgeyUgZm9yIGxvZyBpbiBjb2xsZWN0b3IubG9ncyAlfQogICAgICAgICAgICB7JSBpZiBsb2cuc2NyZWFtIGlzIGRlZmluZWQgYW5kIG5vdCBsb2cuc2NyZWFtICV9CiAgICAgICAgICAgICAgICB7JSBzZXQgZGVwcmVjYXRpb25fbG9ncyA9IGRlcHJlY2F0aW9uX2xvZ3N8bWVyZ2UoW2xvZ10pICV9CiAgICAgICAgICAgIHslIGVsc2VpZiBsb2cuc2NyZWFtIGlzIGRlZmluZWQgYW5kIGxvZy5zY3JlYW0gJX0KICAgICAgICAgICAgICAgIHslIHNldCBzaWxlbmNlZF9sb2dzID0gc2lsZW5jZWRfbG9nc3xtZXJnZShbbG9nXSkgJX0KICAgICAgICAgICAgeyUgZWxzZWlmIGxvZy5wcmlvcml0eU5hbWUgPT0gJ0RFQlVHJyAlfQogICAgICAgICAgICAgICAgeyUgc2V0IGRlYnVnX2xvZ3MgPSBkZWJ1Z19sb2dzfG1lcmdlKFtsb2ddKSAlfQogICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICB7JSBzZXQgaW5mb19hbmRfZXJyb3JfbG9ncyA9IGluZm9fYW5kX2Vycm9yX2xvZ3N8bWVyZ2UoW2xvZ10pICV9CiAgICAgICAgICAgICAgICB7JSBpZiBsb2cucHJpb3JpdHlOYW1lICE9ICdJTkZPJyAlfQogICAgICAgICAgICAgICAgICAgIHslIHNldCBoYXNfZXJyb3JfbG9ncyA9IHRydWUgJX0KICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgeyUgZW5kZm9yICV9CgogICAgICAgIDxkaXYgY2xhc3M9XCJzZi10YWJzXCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWIge3sgaGFzX2Vycm9yX2xvZ3MgPyAnYWN0aXZlJyB9fVwiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+SW5mby4gJmFtcDsgRXJyb3JzIDxzcGFuIGNsYXNzPVwiYmFkZ2Ugc3RhdHVzLXt7IGNvbGxlY3Rvci5jb3VudGVycm9ycyA/ICdlcnJvcicgOiBjb2xsZWN0b3IuY291bnR3YXJuaW5ncyA/ICd3YXJuaW5nJyB9fVwiPnt7IGNvbGxlY3Rvci5jb3VudGVycm9ycyA/OiBpbmZvX2FuZF9lcnJvcl9sb2dzfGxlbmd0aCB9fTwvc3Bhbj48L2gzPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LW11dGVkXCI+SW5mb3JtYXRpb25hbCBhbmQgZXJyb3IgbG9nIG1lc3NhZ2VzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgYXBwbGljYXRpb24uPC9wPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgICAgIHslIGlmIGluZm9fYW5kX2Vycm9yX2xvZ3MgaXMgZW1wdHkgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5UaGVyZSBhcmUgbm8gbG9nIG1lc3NhZ2VzIG9mIHRoaXMgbGV2ZWwuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGhlbHBlci5yZW5kZXJfdGFibGUoaW5mb19hbmRfZXJyb3JfbG9ncywgJ2luZm8nLCB0cnVlKSB9fQogICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiIHt7IG5vdCBoYXNfZXJyb3JfbG9ncyBhbmQgY29sbGVjdG9yLmNvdW50ZGVwcmVjYXRpb25zID4gMCA/ICdhY3RpdmUnIH19XCI+CiAgICAgICAgICAgICAgICB7IyAnZGVwcmVjYXRpb25fbG9nc3xsZW5ndGgnIGlzIG5vdCB1c2VkIGJlY2F1c2UgZGVwcmVjYXRpb25zIGFyZQogICAgICAgICAgICAgICAgbm93IGdyb3VwZWQgYW5kIHRoZSBncm91cCBjb3VudCBkb2Vzbid0IG1hdGNoIHRoZSBtZXNzYWdlIGNvdW50ICN9CiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5EZXByZWNhdGlvbnMgPHNwYW4gY2xhc3M9XCJiYWRnZSBzdGF0dXMte3sgY29sbGVjdG9yLmNvdW50ZGVwcmVjYXRpb25zID8gJ3dhcm5pbmcnIH19XCI+e3sgY29sbGVjdG9yLmNvdW50ZGVwcmVjYXRpb25zfGRlZmF1bHQoMCkgfX08L3NwYW4+PC9oMz4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC1tdXRlZFwiPkxvZyBtZXNzYWdlcyBnZW5lcmF0ZWQgYnkgdXNpbmcgZmVhdHVyZXMgbWFya2VkIGFzIGRlcHJlY2F0ZWQuPC9wPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgICAgIHslIGlmIGRlcHJlY2F0aW9uX2xvZ3MgaXMgZW1wdHkgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5UaGVyZSBhcmUgbm8gbG9nIG1lc3NhZ2VzIGFib3V0IGRlcHJlY2F0ZWQgZmVhdHVyZXMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGhlbHBlci5yZW5kZXJfdGFibGUoZGVwcmVjYXRpb25fbG9ncywgJ2RlcHJlY2F0aW9uJywgZmFsc2UsIHRydWUpIH19CiAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJcIj4KICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPkRlYnVnIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj57eyBkZWJ1Z19sb2dzfGxlbmd0aCB9fTwvc3Bhbj48L2gzPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LW11dGVkXCI+VW5pbXBvcnRhbnQgbG9nIG1lc3NhZ2VzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgYXBwbGljYXRpb24uPC9wPgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgICAgIHslIGlmIGRlYnVnX2xvZ3MgaXMgZW1wdHkgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5UaGVyZSBhcmUgbm8gbG9nIG1lc3NhZ2VzIG9mIHRoaXMgbGV2ZWwuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgIHt7IGhlbHBlci5yZW5kZXJfdGFibGUoZGVidWdfbG9ncywgJ2RlYnVnJykgfX0KICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+UEhQIE5vdGljZXMgPHNwYW4gY2xhc3M9XCJiYWRnZVwiPnt7IGNvbGxlY3Rvci5jb3VudHNjcmVhbXN8ZGVmYXVsdCgwKSB9fTwvc3Bhbj48L2gzPgogICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LW11dGVkXCI+TG9nIG1lc3NhZ2VzIGdlbmVyYXRlZCBieSBQSFAgbm90aWNlcyBzaWxlbmNlZCB3aXRoIHRoZSBAIG9wZXJhdG9yLjwvcD4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgICAgICB7JSBpZiBzaWxlbmNlZF9sb2dzIGlzIGVtcHR5ICV9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgYXJlIG5vIGxvZyBtZXNzYWdlcyBvZiB0aGlzIGxldmVsLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgICAgICB7eyBoZWxwZXIucmVuZGVyX3RhYmxlKHNpbGVuY2VkX2xvZ3MsICdzaWxlbmNlZCcpIH19CiAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIHslIHNldCBjb21waWxlckxvZ1RvdGFsID0gMCAlfQogICAgICAgICAgICB7JSBmb3IgbG9ncyBpbiBjb2xsZWN0b3IuY29tcGlsZXJMb2dzICV9CiAgICAgICAgICAgICAgICB7JSBzZXQgY29tcGlsZXJMb2dUb3RhbCA9IGNvbXBpbGVyTG9nVG90YWwgKyBsb2dzfGxlbmd0aCAlfQogICAgICAgICAgICB7JSBlbmRmb3IgJX0KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYlwiPgogICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+Q29udGFpbmVyIDxzcGFuIGNsYXNzPVwiYmFkZ2VcIj57eyBjb21waWxlckxvZ1RvdGFsIH19PC9zcGFuPjwvaDM+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRleHQtbXV0ZWRcIj5Mb2cgbWVzc2FnZXMgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY29tcGlsYXRpb24gb2YgdGhlIHNlcnZpY2UgY29udGFpbmVyLjwvcD4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgICAgICB7JSBpZiBjb2xsZWN0b3IuY29tcGlsZXJMb2dzIGlzIGVtcHR5ICV9CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgYXJlIG5vIGNvbXBpbGVyIGxvZyBtZXNzYWdlcy48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwibG9nc1wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwiZnVsbC13aWR0aFwiPkNsYXNzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPk1lc3NhZ2VzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZm9yIGNsYXNzLCBsb2dzIGluIGNvbGxlY3Rvci5jb21waWxlckxvZ3MgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwiXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIHNldCBjb250ZXh0X2lkID0gJ2NvbnRleHQtY29tcGlsZXItJyB+IGxvb3AuaW5kZXggJX0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiYnRuIGJ0bi1saW5rIHNmLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlLXNlbGVjdG9yPVwiI3t7IGNvbnRleHRfaWQgfX1cIiBkYXRhLXRvZ2dsZS1hbHQtY29udGVudD1cInt7IGNsYXNzIH19XCI+e3sgY2xhc3MgfX08L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwie3sgY29udGV4dF9pZCB9fVwiIGNsYXNzPVwiY29udGV4dCBzZi10b2dnbGUtY29udGVudCBzZi10b2dnbGUtaGlkZGVuXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZm9yIGxvZyBpbiBsb2dzICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e3sgcHJvZmlsZXJfZHVtcF9sb2cobG9nLm1lc3NhZ2UpIH19PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kZm9yICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiZm9udC1ub3JtYWwgdGV4dC1yaWdodFwiPnt7IGxvZ3N8bGVuZ3RoIH19PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRmb3IgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPC9kaXY+CgogICAgICAgIDxzY3JpcHQ+U2Zqcy5jcmVhdGVGaWx0ZXJzKCk7PC9zY3JpcHQ+CiAgICB7JSBlbmRpZiAlfQp7JSBlbmRibG9jayAlfQoKeyUgbWFjcm8gcmVuZGVyX3RhYmxlKGxvZ3MsIGNhdGVnb3J5ID0gJycsIHNob3dfbGV2ZWwgPSBmYWxzZSwgaXNfZGVwcmVjYXRpb24gPSBmYWxzZSkgJX0KICAgIHslIGltcG9ydCBfc2VsZiBhcyBoZWxwZXIgJX0KICAgIHslIHNldCBjaGFubmVsX2lzX2RlZmluZWQgPSAobG9nc3xmaXJzdCkuY2hhbm5lbCBpcyBkZWZpbmVkICV9CiAgICB7JSBzZXQgZmlsdGVyID0gc2hvd19sZXZlbCBvciBjaGFubmVsX2lzX2RlZmluZWQgJX0KCiAgICA8dGFibGUgY2xhc3M9XCJsb2dzXCJ7JSBpZiBzaG93X2xldmVsICV9IGRhdGEtZmlsdGVyLWxldmVsPVwiRW1lcmdlbmN5LEFsZXJ0LENyaXRpY2FsLEVycm9yLFdhcm5pbmcsTm90aWNlLEluZm9cInslIGVuZGlmICV9eyUgaWYgZmlsdGVyICV9IGRhdGEtZmlsdGVyc3slIGVuZGlmICV9PgogICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgeyUgaWYgc2hvd19sZXZlbCAlfTx0aCBkYXRhLWZpbHRlcj1cImxldmVsXCI+TGV2ZWw8L3RoPnslIGVsc2UgJX08dGg+VGltZTwvdGg+eyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgIHslIGlmIGNoYW5uZWxfaXNfZGVmaW5lZCAlfTx0aCBkYXRhLWZpbHRlcj1cImNoYW5uZWxcIj5DaGFubmVsPC90aD57JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwiZnVsbC13aWR0aFwiPk1lc3NhZ2U8L3RoPgogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CgogICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgeyUgZm9yIGxvZyBpbiBsb2dzICV9CiAgICAgICAgICAgICAgICB7JSBzZXQgY3NzX2NsYXNzID0gaXNfZGVwcmVjYXRpb24gPyAnJwogICAgICAgICAgICAgICAgICAgIDogbG9nLnByaW9yaXR5TmFtZSBpbiBbJ0NSSVRJQ0FMJywgJ0VSUk9SJywgJ0FMRVJUJywgJ0VNRVJHRU5DWSddID8gJ3N0YXR1cy1lcnJvcicKICAgICAgICAgICAgICAgICAgICA6IGxvZy5wcmlvcml0eU5hbWUgPT0gJ1dBUk5JTkcnID8gJ3N0YXR1cy13YXJuaW5nJwogICAgICAgICAgICAgICAgJX0KICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cInt7IGNzc19jbGFzcyB9fVwieyUgaWYgc2hvd19sZXZlbCAlfSBkYXRhLWZpbHRlci1sZXZlbD1cInt7IGxvZy5wcmlvcml0eU5hbWV8bG93ZXIgfX1cInslIGVuZGlmICV9eyUgaWYgY2hhbm5lbF9pc19kZWZpbmVkICV9IGRhdGEtZmlsdGVyLWNoYW5uZWw9XCJ7eyBsb2cuY2hhbm5lbCBpcyBub3QgbnVsbCA/IGxvZy5jaGFubmVsIDogJycgfX1cInslIGVuZGlmICV9PgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsIHRleHQtc21hbGxcIiBub3dyYXA+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIHNob3dfbGV2ZWwgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29sb3JlZCB0ZXh0LWJvbGRcIj57eyBsb2cucHJpb3JpdHlOYW1lIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgICAgICAgICA8dGltZSBjbGFzcz1cInRleHQtbXV0ZWQgbmV3bGluZVwiIHRpdGxlPVwie3sgbG9nLnRpbWVzdGFtcHxkYXRlKCdyJykgfX1cIiBkYXRldGltZT1cInt7IGxvZy50aW1lc3RhbXB8ZGF0ZSgnYycpIH19XCI+e3sgbG9nLnRpbWVzdGFtcHxkYXRlKCdIOmk6cycpIH19PC90aW1lPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIHslIGlmIGNoYW5uZWxfaXNfZGVmaW5lZCAlfQogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbCB0ZXh0LXNtYWxsIHRleHQtYm9sZFwiIG5vd3JhcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGxvZy5jaGFubmVsIGlzIG51bGwgJX08ZW0+bi9hPC9lbT57JSBlbHNlICV9e3sgbG9nLmNoYW5uZWwgfX17JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgbG9nLmVycm9yQ291bnQgaXMgZGVmaW5lZCBhbmQgbG9nLmVycm9yQ291bnQgPiAxICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkXCI+KHt7IGxvZy5lcnJvckNvdW50IH19IHRpbWVzKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CgogICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsXCI+e3sgaGVscGVyLnJlbmRlcl9sb2dfbWVzc2FnZShjYXRlZ29yeSwgbG9vcC5pbmRleCwgbG9nKSB9fTwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICB7JSBlbmRmb3IgJX0KICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KeyUgZW5kbWFjcm8gJX0KCnslIG1hY3JvIHJlbmRlcl9sb2dfbWVzc2FnZShjYXRlZ29yeSwgbG9nX2luZGV4LCBsb2cpICV9CiAgICB7JSBzZXQgaGFzX2NvbnRleHQgPSBsb2cuY29udGV4dCBpcyBkZWZpbmVkIGFuZCBsb2cuY29udGV4dCBpcyBub3QgZW1wdHkgJX0KICAgIHslIHNldCBoYXNfdHJhY2UgPSBsb2cuY29udGV4dC5leGNlcHRpb24udHJhY2UgaXMgZGVmaW5lZCAlfQoKICAgIHslIGlmIG5vdCBoYXNfY29udGV4dCAlfQogICAgICAgIHt7IHByb2ZpbGVyX2R1bXBfbG9nKGxvZy5tZXNzYWdlKSB9fQogICAgeyUgZWxzZSAlfQogICAgICAgIHt7IHByb2ZpbGVyX2R1bXBfbG9nKGxvZy5tZXNzYWdlLCBsb2cuY29udGV4dCkgfX0KCiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtc21hbGwgZm9udC1ub3JtYWxcIj4KICAgICAgICAgICAgeyUgc2V0IGNvbnRleHRfaWQgPSAnY29udGV4dC0nIH4gY2F0ZWdvcnkgfiAnLScgfiBsb2dfaW5kZXggJX0KICAgICAgICAgICAgPGEgY2xhc3M9XCJidG4gYnRuLWxpbmsgdGV4dC1zbWFsbCBzZi10b2dnbGVcIiBkYXRhLXRvZ2dsZS1zZWxlY3Rvcj1cIiN7eyBjb250ZXh0X2lkIH19XCIgZGF0YS10b2dnbGUtYWx0LWNvbnRlbnQ9XCJIaWRlIGNvbnRleHRcIj5TaG93IGNvbnRleHQ8L2E+CgogICAgICAgICAgICB7JSBpZiBoYXNfdHJhY2UgJX0KICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOwogICAgICAgICAgICAgICAgeyUgc2V0IHRyYWNlX2lkID0gJ3RyYWNlLScgfiBjYXRlZ29yeSB+ICctJyB+IGxvZ19pbmRleCAlfQogICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJidG4gYnRuLWxpbmsgdGV4dC1zbWFsbCBzZi10b2dnbGVcIiBkYXRhLXRvZ2dsZS1zZWxlY3Rvcj1cIiN7eyB0cmFjZV9pZCB9fVwiIGRhdGEtdG9nZ2xlLWFsdC1jb250ZW50PVwiSGlkZSB0cmFjZVwiPlNob3cgdHJhY2U8L2E+CiAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgaWQ9XCJ7eyBjb250ZXh0X2lkIH19XCIgY2xhc3M9XCJjb250ZXh0IHNmLXRvZ2dsZS1jb250ZW50IHNmLXRvZ2dsZS1oaWRkZW5cIj4KICAgICAgICAgICAge3sgcHJvZmlsZXJfZHVtcChsb2cuY29udGV4dCwgbWF4RGVwdGg9MSkgfX0KICAgICAgICA8L2Rpdj4KCiAgICAgICAgeyUgaWYgaGFzX3RyYWNlICV9CiAgICAgICAgICAgIDxkaXYgaWQ9XCJ7eyB0cmFjZV9pZCB9fVwiIGNsYXNzPVwiY29udGV4dCBzZi10b2dnbGUtY29udGVudCBzZi10b2dnbGUtaGlkZGVuXCI+CiAgICAgICAgICAgICAgICB7eyBwcm9maWxlcl9kdW1wKGxvZy5jb250ZXh0LmV4Y2VwdGlvbi50cmFjZSwgbWF4RGVwdGg9MSkgfX0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgeyUgZW5kaWYgJX0KICAgIHslIGVuZGlmICV9CnslIGVuZG1hY3JvICV9CiIsICJAV2ViUHJvZmlsZXIvQ29sbGVjdG9yL2xvZ2dlci5odG1sLnR3aWciLCAiQzpcXHhhbXBwXFxodGRvY3NcXFBST0pFVC1FTkktMlxcdmVuZG9yXFxzeW1mb255XFx3ZWItcHJvZmlsZXItYnVuZGxlXFxSZXNvdXJjZXNcXHZpZXdzXFxDb2xsZWN0b3JcXGxvZ2dlci5odG1sLnR3aWciKTsKICAgIH0KfQoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MTp7czo4MDoiXF9fVHdpZ1RlbXBsYXRlX2ZkYTgxMDE4YWM5YmQwM2E1NjBmMzY2NWE1NzA3MzZlZWJjNzVlNjVhZWViNTk3ZmVhY2Q5OTY5MTg2Y2VkNzEiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxMTp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODA6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6Nzk6Il9fVHdpZ1RlbXBsYXRlX2ZkYTgxMDE4YWM5YmQwM2E1NjBmMzY2NWE1NzA3MzZlZWJjNzVlNjVhZWViNTk3ZmVhY2Q5OTY5MTg2Y2VkNzEiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZG9jQmxvY2siO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHBhcmVudCI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjE0OiJcVHdpZ1xUZW1wbGF0ZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjg6IlRlbXBsYXRlIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGltcGxlbWVudHMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBjb25zdGFudHMiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwcm9wZXJ0aWVzIjthOjI6e3M6ODk6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjokc291cmNlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5Ijo4OntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjg5OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6JHNvdXJjZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjY6InNvdXJjZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGRvY0Jsb2NrIjtOO3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHR5cGVzIjthOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkZWZhdWx0IjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHN0YXRpYyI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTg7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7Tjt9czo4OToiXF9fVHdpZ1RlbXBsYXRlX2ZkYTgxMDE4YWM5YmQwM2E1NjBmMzY2NWE1NzA3MzZlZWJjNzVlNjVhZWViNTk3ZmVhY2Q5OTY5MTg2Y2VkNzE6OiRtYWNyb3MiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjg6e3M6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6ODk6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjokbWFjcm9zIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NjoibWFjcm9zIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZG9jQmxvY2siO047czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZXMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGRlZmF1bHQiO3M6MjoiW10iO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHN0YXRpYyI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7Tjt9fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjEyOntzOjk1OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6X19jb25zdHJ1Y3QoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5NToiXF9fVHdpZ1RlbXBsYXRlX2ZkYTgxMDE4YWM5YmQwM2E1NjBmMzY2NWE1NzA3MzZlZWJjNzVlNjVhZWViNTk3ZmVhY2Q5OTY5MTg2Y2VkNzE6Ol9fY29uc3RydWN0KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiX19jb25zdHJ1Y3QiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MzoiZW52IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XyI6MTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MTc6IlxUd2lnXEVudmlyb25tZW50IjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6IkVudmlyb25tZW50Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjIxO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTU6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjpkb0dldFBhcmVudCgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk1OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6ZG9HZXRQYXJlbnQoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJkb0dldFBhcmVudCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6OToicHJvdGVjdGVkIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjE6e3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fX19czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MzQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5MzoiXF9fVHdpZ1RlbXBsYXRlX2ZkYTgxMDE4YWM5YmQwM2E1NjBmMzY2NWE1NzA3MzZlZWJjNzVlNjVhZWViNTk3ZmVhY2Q5OTY5MTg2Y2VkNzE6OmRvRGlzcGxheSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjkzOiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6ZG9EaXNwbGF5KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo5OiJkb0Rpc3BsYXkiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjk6InByb3RlY3RlZCI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6Mjp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NzoiY29udGV4dCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoxOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX19fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjY6ImJsb2NrcyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoxOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX19fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjk3OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6YmxvY2tfdG9vbGJhcigpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk3OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6YmxvY2tfdG9vbGJhcigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTM6ImJsb2NrX3Rvb2xiYXIiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6Mjp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NzoiY29udGV4dCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjY6ImJsb2NrcyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoxOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX19fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo2MztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjk0OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6YmxvY2tfbWVudSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk0OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6YmxvY2tfbWVudSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTA6ImJsb2NrX21lbnUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6Mjp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NzoiY29udGV4dCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjY6ImJsb2NrcyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoxOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX19fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxNDU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5NToiXF9fVHdpZ1RlbXBsYXRlX2ZkYTgxMDE4YWM5YmQwM2E1NjBmMzY2NWE1NzA3MzZlZWJjNzVlNjVhZWViNTk3ZmVhY2Q5OTY5MTg2Y2VkNzE6OmJsb2NrX3BhbmVsKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTU6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjpibG9ja19wYW5lbCgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6ImJsb2NrX3BhbmVsIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjc6ImNvbnRleHQiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6MTp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZAB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtzOjI6IltdIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTg5O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6MTAyOiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6bWFjcm9fcmVuZGVyX3RhYmxlKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MTAyOiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6bWFjcm9fcmVuZGVyX3RhYmxlKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxODoibWFjcm9fcmVuZGVyX3RhYmxlIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjU6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6Il9fbG9nc19fIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czo0OiJudWxsIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTI6Il9fY2F0ZWdvcnlfXyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiIiIiO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czoxNDoiX19zaG93X2xldmVsX18iO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtzOjU6ImZhbHNlIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aTozO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTg6Il9faXNfZGVwcmVjYXRpb25fXyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6NToiZmFsc2UiO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjQ7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czoxMToiX192YXJhcmdzX18iO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjoxO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo1MzE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czoxMDg6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjptYWNyb19yZW5kZXJfbG9nX21lc3NhZ2UoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxMDg6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjptYWNyb19yZW5kZXJfbG9nX21lc3NhZ2UoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjI0OiJtYWNyb19yZW5kZXJfbG9nX21lc3NhZ2UiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6NDp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTI6Il9fY2F0ZWdvcnlfXyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6NDoibnVsbCI7czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjEzOiJfX2xvZ19pbmRleF9fIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czo0OiJudWxsIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToyO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NzoiX19sb2dfXyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6NDoibnVsbCI7czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MztPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjExOiJfX3ZhcmFyZ3NfXyI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjE7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjcxNDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjk5OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6Z2V0VGVtcGxhdGVOYW1lKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6OTk6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjpnZXRUZW1wbGF0ZU5hbWUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE1OiJnZXRUZW1wbGF0ZU5hbWUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6ODIyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6OTU6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjppc1RyYWl0YWJsZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk1OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6aXNUcmFpdGFibGUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJpc1RyYWl0YWJsZSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4Mjc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo5NjoiXF9fVHdpZ1RlbXBsYXRlX2ZkYTgxMDE4YWM5YmQwM2E1NjBmMzY2NWE1NzA3MzZlZWJjNzVlNjVhZWViNTk3ZmVhY2Q5OTY5MTg2Y2VkNzE6OmdldERlYnVnSW5mbygpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjk2OiJcX19Ud2lnVGVtcGxhdGVfZmRhODEwMThhYzliZDAzYTU2MGYzNjY1YTU3MDczNmVlYmM3NWU2NWFlZWI1OTdmZWFjZDk5NjkxODZjZWQ3MTo6Z2V0RGVidWdJbmZvKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMjoiZ2V0RGVidWdJbmZvIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjgzMjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjEwMDoiXF9fVHdpZ1RlbXBsYXRlX2ZkYTgxMDE4YWM5YmQwM2E1NjBmMzY2NWE1NzA3MzZlZWJjNzVlNjVhZWViNTk3ZmVhY2Q5OTY5MTg2Y2VkNzE6OmdldFNvdXJjZUNvbnRleHQoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxMDA6IlxfX1R3aWdUZW1wbGF0ZV9mZGE4MTAxOGFjOWJkMDNhNTYwZjM2NjVhNTcwNzM2ZWViYzc1ZTY1YWVlYjU5N2ZlYWNkOTk2OTE4NmNlZDcxOjpnZXRTb3VyY2VDb250ZXh0KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNjoiZ2V0U291cmNlQ29udGV4dCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4Mzc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwB1c2VkVHJhaXRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjE2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fX19czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";